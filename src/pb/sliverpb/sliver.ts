/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: sliverpb/sliver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../commonpb/common";
import * as pb_1 from "google-protobuf";
export namespace sliverpb {
    export enum RegistryType {
        Unknown = 0,
        Binary = 1,
        String = 2,
        DWORD = 3,
        QWORD = 4
    }
    export enum PivotType {
        TCP = 0,
        UDP = 1,
        NamedPipe = 2
    }
    export enum PeerFailureType {
        SEND_FAILURE = 0,
        DISCONNECT = 1
    }
    export class Envelope extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            Type?: number;
            Data?: Uint8Array;
            UnknownMessageType?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("UnknownMessageType" in data && data.UnknownMessageType != undefined) {
                    this.UnknownMessageType = data.UnknownMessageType;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Type() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get UnknownMessageType() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set UnknownMessageType(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ID?: number;
            Type?: number;
            Data?: Uint8Array;
            UnknownMessageType?: boolean;
        }) {
            const message = new Envelope({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.UnknownMessageType != null) {
                message.UnknownMessageType = data.UnknownMessageType;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                Type?: number;
                Data?: Uint8Array;
                UnknownMessageType?: boolean;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.UnknownMessageType != null) {
                data.UnknownMessageType = this.UnknownMessageType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeInt64(1, this.ID);
            if (this.Type !== undefined)
                writer.writeUint32(2, this.Type);
            if (this.Data !== undefined)
                writer.writeBytes(3, this.Data);
            if (this.UnknownMessageType !== undefined)
                writer.writeBool(4, this.UnknownMessageType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Envelope {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Envelope();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readInt64();
                        break;
                    case 2:
                        message.Type = reader.readUint32();
                        break;
                    case 3:
                        message.Data = reader.readBytes();
                        break;
                    case 4:
                        message.UnknownMessageType = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Envelope {
            return Envelope.deserialize(bytes);
        }
    }
    export class BeaconTasks extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: string;
            Tasks?: Envelope[];
            NextCheckin?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Tasks" in data && data.Tasks != undefined) {
                    this.Tasks = data.Tasks;
                }
                if ("NextCheckin" in data && data.NextCheckin != undefined) {
                    this.NextCheckin = data.NextCheckin;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Tasks() {
            return pb_1.Message.getRepeatedWrapperField(this, Envelope, 2) as Envelope[];
        }
        set Tasks(value: Envelope[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get NextCheckin() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set NextCheckin(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ID?: string;
            Tasks?: ReturnType<typeof Envelope.prototype.toObject>[];
            NextCheckin?: number;
        }) {
            const message = new BeaconTasks({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Tasks != null) {
                message.Tasks = data.Tasks.map(item => Envelope.fromObject(item));
            }
            if (data.NextCheckin != null) {
                message.NextCheckin = data.NextCheckin;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: string;
                Tasks?: ReturnType<typeof Envelope.prototype.toObject>[];
                NextCheckin?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Tasks != null) {
                data.Tasks = this.Tasks.map((item: Envelope) => item.toObject());
            }
            if (this.NextCheckin != null) {
                data.NextCheckin = this.NextCheckin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ID === "string" && this.ID.length)
                writer.writeString(1, this.ID);
            if (this.Tasks !== undefined)
                writer.writeRepeatedMessage(2, this.Tasks, (item: Envelope) => item.serialize(writer));
            if (this.NextCheckin !== undefined)
                writer.writeInt64(3, this.NextCheckin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeaconTasks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeaconTasks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.Tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Envelope.deserialize(reader), Envelope));
                        break;
                    case 3:
                        message.NextCheckin = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeaconTasks {
            return BeaconTasks.deserialize(bytes);
        }
    }
    export class Register extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Hostname?: string;
            Uuid?: string;
            Username?: string;
            Uid?: string;
            Gid?: string;
            Os?: string;
            Arch?: string;
            Pid?: number;
            Filename?: string;
            ActiveC2?: string;
            Version?: string;
            ReconnectInterval?: number;
            ProxyURL?: string;
            ConfigID?: string;
            PeerID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Uuid" in data && data.Uuid != undefined) {
                    this.Uuid = data.Uuid;
                }
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("Uid" in data && data.Uid != undefined) {
                    this.Uid = data.Uid;
                }
                if ("Gid" in data && data.Gid != undefined) {
                    this.Gid = data.Gid;
                }
                if ("Os" in data && data.Os != undefined) {
                    this.Os = data.Os;
                }
                if ("Arch" in data && data.Arch != undefined) {
                    this.Arch = data.Arch;
                }
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Filename" in data && data.Filename != undefined) {
                    this.Filename = data.Filename;
                }
                if ("ActiveC2" in data && data.ActiveC2 != undefined) {
                    this.ActiveC2 = data.ActiveC2;
                }
                if ("Version" in data && data.Version != undefined) {
                    this.Version = data.Version;
                }
                if ("ReconnectInterval" in data && data.ReconnectInterval != undefined) {
                    this.ReconnectInterval = data.ReconnectInterval;
                }
                if ("ProxyURL" in data && data.ProxyURL != undefined) {
                    this.ProxyURL = data.ProxyURL;
                }
                if ("ConfigID" in data && data.ConfigID != undefined) {
                    this.ConfigID = data.ConfigID;
                }
                if ("PeerID" in data && data.PeerID != undefined) {
                    this.PeerID = data.PeerID;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Uuid() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Uuid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Username() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Uid() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Uid(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get Gid() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set Gid(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get Os() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set Os(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get Arch() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set Arch(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Pid() {
            return pb_1.Message.getField(this, 9) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get Filename() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set Filename(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get ActiveC2() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set ActiveC2(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get Version() {
            return pb_1.Message.getField(this, 12) as string;
        }
        set Version(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get ReconnectInterval() {
            return pb_1.Message.getField(this, 13) as number;
        }
        set ReconnectInterval(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get ProxyURL() {
            return pb_1.Message.getField(this, 14) as string;
        }
        set ProxyURL(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get ConfigID() {
            return pb_1.Message.getField(this, 16) as string;
        }
        set ConfigID(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get PeerID() {
            return pb_1.Message.getField(this, 17) as number;
        }
        set PeerID(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            Name?: string;
            Hostname?: string;
            Uuid?: string;
            Username?: string;
            Uid?: string;
            Gid?: string;
            Os?: string;
            Arch?: string;
            Pid?: number;
            Filename?: string;
            ActiveC2?: string;
            Version?: string;
            ReconnectInterval?: number;
            ProxyURL?: string;
            ConfigID?: string;
            PeerID?: number;
        }) {
            const message = new Register({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Uuid != null) {
                message.Uuid = data.Uuid;
            }
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.Uid != null) {
                message.Uid = data.Uid;
            }
            if (data.Gid != null) {
                message.Gid = data.Gid;
            }
            if (data.Os != null) {
                message.Os = data.Os;
            }
            if (data.Arch != null) {
                message.Arch = data.Arch;
            }
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Filename != null) {
                message.Filename = data.Filename;
            }
            if (data.ActiveC2 != null) {
                message.ActiveC2 = data.ActiveC2;
            }
            if (data.Version != null) {
                message.Version = data.Version;
            }
            if (data.ReconnectInterval != null) {
                message.ReconnectInterval = data.ReconnectInterval;
            }
            if (data.ProxyURL != null) {
                message.ProxyURL = data.ProxyURL;
            }
            if (data.ConfigID != null) {
                message.ConfigID = data.ConfigID;
            }
            if (data.PeerID != null) {
                message.PeerID = data.PeerID;
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Hostname?: string;
                Uuid?: string;
                Username?: string;
                Uid?: string;
                Gid?: string;
                Os?: string;
                Arch?: string;
                Pid?: number;
                Filename?: string;
                ActiveC2?: string;
                Version?: string;
                ReconnectInterval?: number;
                ProxyURL?: string;
                ConfigID?: string;
                PeerID?: number;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Uuid != null) {
                data.Uuid = this.Uuid;
            }
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.Uid != null) {
                data.Uid = this.Uid;
            }
            if (this.Gid != null) {
                data.Gid = this.Gid;
            }
            if (this.Os != null) {
                data.Os = this.Os;
            }
            if (this.Arch != null) {
                data.Arch = this.Arch;
            }
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Filename != null) {
                data.Filename = this.Filename;
            }
            if (this.ActiveC2 != null) {
                data.ActiveC2 = this.ActiveC2;
            }
            if (this.Version != null) {
                data.Version = this.Version;
            }
            if (this.ReconnectInterval != null) {
                data.ReconnectInterval = this.ReconnectInterval;
            }
            if (this.ProxyURL != null) {
                data.ProxyURL = this.ProxyURL;
            }
            if (this.ConfigID != null) {
                data.ConfigID = this.ConfigID;
            }
            if (this.PeerID != null) {
                data.PeerID = this.PeerID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(2, this.Hostname);
            if (typeof this.Uuid === "string" && this.Uuid.length)
                writer.writeString(3, this.Uuid);
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(4, this.Username);
            if (typeof this.Uid === "string" && this.Uid.length)
                writer.writeString(5, this.Uid);
            if (typeof this.Gid === "string" && this.Gid.length)
                writer.writeString(6, this.Gid);
            if (typeof this.Os === "string" && this.Os.length)
                writer.writeString(7, this.Os);
            if (typeof this.Arch === "string" && this.Arch.length)
                writer.writeString(8, this.Arch);
            if (this.Pid !== undefined)
                writer.writeInt32(9, this.Pid);
            if (typeof this.Filename === "string" && this.Filename.length)
                writer.writeString(10, this.Filename);
            if (typeof this.ActiveC2 === "string" && this.ActiveC2.length)
                writer.writeString(11, this.ActiveC2);
            if (typeof this.Version === "string" && this.Version.length)
                writer.writeString(12, this.Version);
            if (this.ReconnectInterval !== undefined)
                writer.writeInt64(13, this.ReconnectInterval);
            if (typeof this.ProxyURL === "string" && this.ProxyURL.length)
                writer.writeString(14, this.ProxyURL);
            if (typeof this.ConfigID === "string" && this.ConfigID.length)
                writer.writeString(16, this.ConfigID);
            if (this.PeerID !== undefined)
                writer.writeInt64(17, this.PeerID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Register {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Register();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.Hostname = reader.readString();
                        break;
                    case 3:
                        message.Uuid = reader.readString();
                        break;
                    case 4:
                        message.Username = reader.readString();
                        break;
                    case 5:
                        message.Uid = reader.readString();
                        break;
                    case 6:
                        message.Gid = reader.readString();
                        break;
                    case 7:
                        message.Os = reader.readString();
                        break;
                    case 8:
                        message.Arch = reader.readString();
                        break;
                    case 9:
                        message.Pid = reader.readInt32();
                        break;
                    case 10:
                        message.Filename = reader.readString();
                        break;
                    case 11:
                        message.ActiveC2 = reader.readString();
                        break;
                    case 12:
                        message.Version = reader.readString();
                        break;
                    case 13:
                        message.ReconnectInterval = reader.readInt64();
                        break;
                    case 14:
                        message.ProxyURL = reader.readString();
                        break;
                    case 16:
                        message.ConfigID = reader.readString();
                        break;
                    case 17:
                        message.PeerID = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Register {
            return Register.deserialize(bytes);
        }
    }
    export class BeaconRegister extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: string;
            Interval?: number;
            Jitter?: number;
            Register?: Register;
            NextCheckin?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Interval" in data && data.Interval != undefined) {
                    this.Interval = data.Interval;
                }
                if ("Jitter" in data && data.Jitter != undefined) {
                    this.Jitter = data.Jitter;
                }
                if ("Register" in data && data.Register != undefined) {
                    this.Register = data.Register;
                }
                if ("NextCheckin" in data && data.NextCheckin != undefined) {
                    this.NextCheckin = data.NextCheckin;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Interval() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Interval(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Jitter() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Jitter(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Register() {
            return pb_1.Message.getWrapperField(this, Register, 4) as Register;
        }
        set Register(value: Register) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get NextCheckin() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set NextCheckin(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ID?: string;
            Interval?: number;
            Jitter?: number;
            Register?: ReturnType<typeof Register.prototype.toObject>;
            NextCheckin?: number;
        }) {
            const message = new BeaconRegister({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Interval != null) {
                message.Interval = data.Interval;
            }
            if (data.Jitter != null) {
                message.Jitter = data.Jitter;
            }
            if (data.Register != null) {
                message.Register = Register.fromObject(data.Register);
            }
            if (data.NextCheckin != null) {
                message.NextCheckin = data.NextCheckin;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: string;
                Interval?: number;
                Jitter?: number;
                Register?: ReturnType<typeof Register.prototype.toObject>;
                NextCheckin?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Interval != null) {
                data.Interval = this.Interval;
            }
            if (this.Jitter != null) {
                data.Jitter = this.Jitter;
            }
            if (this.Register != null) {
                data.Register = this.Register.toObject();
            }
            if (this.NextCheckin != null) {
                data.NextCheckin = this.NextCheckin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ID === "string" && this.ID.length)
                writer.writeString(1, this.ID);
            if (this.Interval !== undefined)
                writer.writeInt64(2, this.Interval);
            if (this.Jitter !== undefined)
                writer.writeInt64(3, this.Jitter);
            if (this.Register !== undefined)
                writer.writeMessage(4, this.Register, () => this.Register.serialize(writer));
            if (this.NextCheckin !== undefined)
                writer.writeInt64(5, this.NextCheckin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeaconRegister {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeaconRegister();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readString();
                        break;
                    case 2:
                        message.Interval = reader.readInt64();
                        break;
                    case 3:
                        message.Jitter = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.Register, () => message.Register = Register.deserialize(reader));
                        break;
                    case 5:
                        message.NextCheckin = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeaconRegister {
            return BeaconRegister.deserialize(bytes);
        }
    }
    export class SessionRegister extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: string;
            Register?: Register;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Register" in data && data.Register != undefined) {
                    this.Register = data.Register;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Register() {
            return pb_1.Message.getWrapperField(this, Register, 2) as Register;
        }
        set Register(value: Register) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            ID?: string;
            Register?: ReturnType<typeof Register.prototype.toObject>;
        }) {
            const message = new SessionRegister({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Register != null) {
                message.Register = Register.fromObject(data.Register);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: string;
                Register?: ReturnType<typeof Register.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Register != null) {
                data.Register = this.Register.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ID === "string" && this.ID.length)
                writer.writeString(1, this.ID);
            if (this.Register !== undefined)
                writer.writeMessage(2, this.Register, () => this.Register.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionRegister {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionRegister();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.Register, () => message.Register = Register.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionRegister {
            return SessionRegister.deserialize(bytes);
        }
    }
    export class OpenSession extends pb_1.Message {
        constructor(data?: any[] | {
            C2s?: string[];
            Delay?: number;
            Response?: dependency_1.commonpb.Response;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("C2s" in data && data.C2s != undefined) {
                    this.C2s = data.C2s;
                }
                if ("Delay" in data && data.Delay != undefined) {
                    this.Delay = data.Delay;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get C2s() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set C2s(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get Delay() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 8) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            C2s?: string[];
            Delay?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new OpenSession({});
            if (data.C2s != null) {
                message.C2s = data.C2s;
            }
            if (data.Delay != null) {
                message.Delay = data.Delay;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                C2s?: string[];
                Delay?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.C2s != null) {
                data.C2s = this.C2s;
            }
            if (this.Delay != null) {
                data.Delay = this.Delay;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.C2s !== undefined)
                writer.writeRepeatedString(1, this.C2s);
            if (this.Delay !== undefined)
                writer.writeInt64(2, this.Delay);
            if (this.Response !== undefined)
                writer.writeMessage(8, this.Response, () => this.Response.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenSession {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenSession();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.Delay = reader.readInt64();
                        break;
                    case 8:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OpenSession {
            return OpenSession.deserialize(bytes);
        }
    }
    export class CloseSession extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 8) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new CloseSession({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(8, this.Response, () => this.Response.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseSession {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloseSession();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloseSession {
            return CloseSession.deserialize(bytes);
        }
    }
    export class Ping extends pb_1.Message {
        constructor(data?: any[] | {
            Nonce?: number;
            Response?: dependency_1.commonpb.Response;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Nonce" in data && data.Nonce != undefined) {
                    this.Nonce = data.Nonce;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Nonce() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 8) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Nonce?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new Ping({});
            if (data.Nonce != null) {
                message.Nonce = data.Nonce;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Nonce?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Nonce != null) {
                data.Nonce = this.Nonce;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Nonce !== undefined)
                writer.writeInt32(1, this.Nonce);
            if (this.Response !== undefined)
                writer.writeMessage(8, this.Response, () => this.Response.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Nonce = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ping {
            return Ping.deserialize(bytes);
        }
    }
    export class KillReq extends pb_1.Message {
        constructor(data?: any[] | {
            Force?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Force" in data && data.Force != undefined) {
                    this.Force = data.Force;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Force() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set Force(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Force?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new KillReq({});
            if (data.Force != null) {
                message.Force = data.Force;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Force?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Force != null) {
                data.Force = this.Force;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Force !== undefined)
                writer.writeBool(1, this.Force);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KillReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KillReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Force = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KillReq {
            return KillReq.deserialize(bytes);
        }
    }
    export class PsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PsReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PsReq {
            return PsReq.deserialize(bytes);
        }
    }
    export class Ps extends pb_1.Message {
        constructor(data?: any[] | {
            Processes?: dependency_1.commonpb.Process[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Processes" in data && data.Processes != undefined) {
                    this.Processes = data.Processes;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Processes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.commonpb.Process, 1) as dependency_1.commonpb.Process[];
        }
        set Processes(value: dependency_1.commonpb.Process[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Processes?: ReturnType<typeof dependency_1.commonpb.Process.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Ps({});
            if (data.Processes != null) {
                message.Processes = data.Processes.map(item => dependency_1.commonpb.Process.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Processes?: ReturnType<typeof dependency_1.commonpb.Process.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Processes != null) {
                data.Processes = this.Processes.map((item: dependency_1.commonpb.Process) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Processes !== undefined)
                writer.writeRepeatedMessage(1, this.Processes, (item: dependency_1.commonpb.Process) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ps {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ps();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Processes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.commonpb.Process.deserialize(reader), dependency_1.commonpb.Process));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ps {
            return Ps.deserialize(bytes);
        }
    }
    export class TerminateReq extends pb_1.Message {
        constructor(data?: any[] | {
            Pid?: number;
            Force?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Force" in data && data.Force != undefined) {
                    this.Force = data.Force;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Pid() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Force() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set Force(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Pid?: number;
            Force?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new TerminateReq({});
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Force != null) {
                message.Force = data.Force;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Pid?: number;
                Force?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Force != null) {
                data.Force = this.Force;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Pid !== undefined)
                writer.writeInt32(1, this.Pid);
            if (this.Force !== undefined)
                writer.writeBool(2, this.Force);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TerminateReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TerminateReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Pid = reader.readInt32();
                        break;
                    case 2:
                        message.Force = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TerminateReq {
            return TerminateReq.deserialize(bytes);
        }
    }
    export class Terminate extends pb_1.Message {
        constructor(data?: any[] | {
            Pid?: number;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Pid() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Pid?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Terminate({});
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Pid?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Pid !== undefined)
                writer.writeInt32(1, this.Pid);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Terminate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Terminate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Pid = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Terminate {
            return Terminate.deserialize(bytes);
        }
    }
    export class IfconfigReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new IfconfigReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IfconfigReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IfconfigReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IfconfigReq {
            return IfconfigReq.deserialize(bytes);
        }
    }
    export class Ifconfig extends pb_1.Message {
        constructor(data?: any[] | {
            NetInterfaces?: NetInterface[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("NetInterfaces" in data && data.NetInterfaces != undefined) {
                    this.NetInterfaces = data.NetInterfaces;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get NetInterfaces() {
            return pb_1.Message.getRepeatedWrapperField(this, NetInterface, 1) as NetInterface[];
        }
        set NetInterfaces(value: NetInterface[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            NetInterfaces?: ReturnType<typeof NetInterface.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Ifconfig({});
            if (data.NetInterfaces != null) {
                message.NetInterfaces = data.NetInterfaces.map(item => NetInterface.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                NetInterfaces?: ReturnType<typeof NetInterface.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.NetInterfaces != null) {
                data.NetInterfaces = this.NetInterfaces.map((item: NetInterface) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.NetInterfaces !== undefined)
                writer.writeRepeatedMessage(1, this.NetInterfaces, (item: NetInterface) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ifconfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ifconfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.NetInterfaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, NetInterface.deserialize(reader), NetInterface));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ifconfig {
            return Ifconfig.deserialize(bytes);
        }
    }
    export class NetInterface extends pb_1.Message {
        constructor(data?: any[] | {
            Index?: number;
            Name?: string;
            MAC?: string;
            IPAddresses?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Index" in data && data.Index != undefined) {
                    this.Index = data.Index;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("MAC" in data && data.MAC != undefined) {
                    this.MAC = data.MAC;
                }
                if ("IPAddresses" in data && data.IPAddresses != undefined) {
                    this.IPAddresses = data.IPAddresses;
                }
            }
        }
        get Index() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get MAC() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set MAC(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get IPAddresses() {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set IPAddresses(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            Index?: number;
            Name?: string;
            MAC?: string;
            IPAddresses?: string[];
        }) {
            const message = new NetInterface({});
            if (data.Index != null) {
                message.Index = data.Index;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.MAC != null) {
                message.MAC = data.MAC;
            }
            if (data.IPAddresses != null) {
                message.IPAddresses = data.IPAddresses;
            }
            return message;
        }
        toObject() {
            const data: {
                Index?: number;
                Name?: string;
                MAC?: string;
                IPAddresses?: string[];
            } = {};
            if (this.Index != null) {
                data.Index = this.Index;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.MAC != null) {
                data.MAC = this.MAC;
            }
            if (this.IPAddresses != null) {
                data.IPAddresses = this.IPAddresses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Index !== undefined)
                writer.writeInt32(1, this.Index);
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(2, this.Name);
            if (typeof this.MAC === "string" && this.MAC.length)
                writer.writeString(3, this.MAC);
            if (this.IPAddresses !== undefined)
                writer.writeRepeatedString(4, this.IPAddresses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetInterface {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetInterface();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Index = reader.readInt32();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        message.MAC = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetInterface {
            return NetInterface.deserialize(bytes);
        }
    }
    export class LsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new LsReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LsReq {
            return LsReq.deserialize(bytes);
        }
    }
    export class Ls extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Exists?: boolean;
            Files?: FileInfo[];
            timezone?: string;
            timezoneOffset?: number;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Exists" in data && data.Exists != undefined) {
                    this.Exists = data.Exists;
                }
                if ("Files" in data && data.Files != undefined) {
                    this.Files = data.Files;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
                if ("timezoneOffset" in data && data.timezoneOffset != undefined) {
                    this.timezoneOffset = data.timezoneOffset;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Exists() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set Exists(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Files() {
            return pb_1.Message.getRepeatedWrapperField(this, FileInfo, 3) as FileInfo[];
        }
        set Files(value: FileInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get timezone() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timezoneOffset() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set timezoneOffset(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Exists?: boolean;
            Files?: ReturnType<typeof FileInfo.prototype.toObject>[];
            timezone?: string;
            timezoneOffset?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Ls({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Exists != null) {
                message.Exists = data.Exists;
            }
            if (data.Files != null) {
                message.Files = data.Files.map(item => FileInfo.fromObject(item));
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            if (data.timezoneOffset != null) {
                message.timezoneOffset = data.timezoneOffset;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Exists?: boolean;
                Files?: ReturnType<typeof FileInfo.prototype.toObject>[];
                timezone?: string;
                timezoneOffset?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Exists != null) {
                data.Exists = this.Exists;
            }
            if (this.Files != null) {
                data.Files = this.Files.map((item: FileInfo) => item.toObject());
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            if (this.timezoneOffset != null) {
                data.timezoneOffset = this.timezoneOffset;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Exists !== undefined)
                writer.writeBool(2, this.Exists);
            if (this.Files !== undefined)
                writer.writeRepeatedMessage(3, this.Files, (item: FileInfo) => item.serialize(writer));
            if (typeof this.timezone === "string" && this.timezone.length)
                writer.writeString(4, this.timezone);
            if (this.timezoneOffset !== undefined)
                writer.writeInt32(5, this.timezoneOffset);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ls {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ls();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.Exists = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.Files, () => pb_1.Message.addToRepeatedWrapperField(message, 3, FileInfo.deserialize(reader), FileInfo));
                        break;
                    case 4:
                        message.timezone = reader.readString();
                        break;
                    case 5:
                        message.timezoneOffset = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ls {
            return Ls.deserialize(bytes);
        }
    }
    export class FileInfo extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            IsDir?: boolean;
            Size?: number;
            ModTime?: number;
            Mode?: string;
            Link?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("IsDir" in data && data.IsDir != undefined) {
                    this.IsDir = data.IsDir;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
                if ("ModTime" in data && data.ModTime != undefined) {
                    this.ModTime = data.ModTime;
                }
                if ("Mode" in data && data.Mode != undefined) {
                    this.Mode = data.Mode;
                }
                if ("Link" in data && data.Link != undefined) {
                    this.Link = data.Link;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get IsDir() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set IsDir(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Size() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get ModTime() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set ModTime(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Mode() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Mode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get Link() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set Link(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            Name?: string;
            IsDir?: boolean;
            Size?: number;
            ModTime?: number;
            Mode?: string;
            Link?: string;
        }) {
            const message = new FileInfo({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.IsDir != null) {
                message.IsDir = data.IsDir;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            if (data.ModTime != null) {
                message.ModTime = data.ModTime;
            }
            if (data.Mode != null) {
                message.Mode = data.Mode;
            }
            if (data.Link != null) {
                message.Link = data.Link;
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                IsDir?: boolean;
                Size?: number;
                ModTime?: number;
                Mode?: string;
                Link?: string;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.IsDir != null) {
                data.IsDir = this.IsDir;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            if (this.ModTime != null) {
                data.ModTime = this.ModTime;
            }
            if (this.Mode != null) {
                data.Mode = this.Mode;
            }
            if (this.Link != null) {
                data.Link = this.Link;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.IsDir !== undefined)
                writer.writeBool(2, this.IsDir);
            if (this.Size !== undefined)
                writer.writeInt64(3, this.Size);
            if (this.ModTime !== undefined)
                writer.writeInt64(4, this.ModTime);
            if (typeof this.Mode === "string" && this.Mode.length)
                writer.writeString(5, this.Mode);
            if (typeof this.Link === "string" && this.Link.length)
                writer.writeString(6, this.Link);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.IsDir = reader.readBool();
                        break;
                    case 3:
                        message.Size = reader.readInt64();
                        break;
                    case 4:
                        message.ModTime = reader.readInt64();
                        break;
                    case 5:
                        message.Mode = reader.readString();
                        break;
                    case 6:
                        message.Link = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileInfo {
            return FileInfo.deserialize(bytes);
        }
    }
    export class CdReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new CdReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CdReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CdReq {
            return CdReq.deserialize(bytes);
        }
    }
    export class PwdReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PwdReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PwdReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PwdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PwdReq {
            return PwdReq.deserialize(bytes);
        }
    }
    export class Pwd extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Pwd({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pwd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pwd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pwd {
            return Pwd.deserialize(bytes);
        }
    }
    export class RmReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Recursive?: boolean;
            Force?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Recursive" in data && data.Recursive != undefined) {
                    this.Recursive = data.Recursive;
                }
                if ("Force" in data && data.Force != undefined) {
                    this.Force = data.Force;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Recursive() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set Recursive(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Force() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set Force(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Recursive?: boolean;
            Force?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RmReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Recursive != null) {
                message.Recursive = data.Recursive;
            }
            if (data.Force != null) {
                message.Force = data.Force;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Recursive?: boolean;
                Force?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Recursive != null) {
                data.Recursive = this.Recursive;
            }
            if (this.Force != null) {
                data.Force = this.Force;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Recursive !== undefined)
                writer.writeBool(2, this.Recursive);
            if (this.Force !== undefined)
                writer.writeBool(3, this.Force);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RmReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RmReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.Recursive = reader.readBool();
                        break;
                    case 3:
                        message.Force = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RmReq {
            return RmReq.deserialize(bytes);
        }
    }
    export class Rm extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Rm({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Rm {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rm();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Rm {
            return Rm.deserialize(bytes);
        }
    }
    export class MvReq extends pb_1.Message {
        constructor(data?: any[] | {
            Src?: string;
            Dst?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Src" in data && data.Src != undefined) {
                    this.Src = data.Src;
                }
                if ("Dst" in data && data.Dst != undefined) {
                    this.Dst = data.Dst;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Src() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Src(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Dst() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Dst(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Src?: string;
            Dst?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new MvReq({});
            if (data.Src != null) {
                message.Src = data.Src;
            }
            if (data.Dst != null) {
                message.Dst = data.Dst;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Src?: string;
                Dst?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Src != null) {
                data.Src = this.Src;
            }
            if (this.Dst != null) {
                data.Dst = this.Dst;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Src === "string" && this.Src.length)
                writer.writeString(1, this.Src);
            if (typeof this.Dst === "string" && this.Dst.length)
                writer.writeString(2, this.Dst);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MvReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MvReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Src = reader.readString();
                        break;
                    case 2:
                        message.Dst = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MvReq {
            return MvReq.deserialize(bytes);
        }
    }
    export class Mv extends pb_1.Message {
        constructor(data?: any[] | {
            Src?: string;
            Dst?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Src" in data && data.Src != undefined) {
                    this.Src = data.Src;
                }
                if ("Dst" in data && data.Dst != undefined) {
                    this.Dst = data.Dst;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Src() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Src(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Dst() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Dst(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Src?: string;
            Dst?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Mv({});
            if (data.Src != null) {
                message.Src = data.Src;
            }
            if (data.Dst != null) {
                message.Dst = data.Dst;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Src?: string;
                Dst?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Src != null) {
                data.Src = this.Src;
            }
            if (this.Dst != null) {
                data.Dst = this.Dst;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Src === "string" && this.Src.length)
                writer.writeString(1, this.Src);
            if (typeof this.Dst === "string" && this.Dst.length)
                writer.writeString(2, this.Dst);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mv {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Mv();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Src = reader.readString();
                        break;
                    case 2:
                        message.Dst = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Mv {
            return Mv.deserialize(bytes);
        }
    }
    export class MkdirReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new MkdirReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MkdirReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MkdirReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MkdirReq {
            return MkdirReq.deserialize(bytes);
        }
    }
    export class Mkdir extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Mkdir({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mkdir {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Mkdir();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Mkdir {
            return Mkdir.deserialize(bytes);
        }
    }
    export class DownloadReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Start?: number;
            Stop?: number;
            Recurse?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Start" in data && data.Start != undefined) {
                    this.Start = data.Start;
                }
                if ("Stop" in data && data.Stop != undefined) {
                    this.Stop = data.Stop;
                }
                if ("Recurse" in data && data.Recurse != undefined) {
                    this.Recurse = data.Recurse;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Start() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Start(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Stop() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Stop(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Recurse() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set Recurse(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Start?: number;
            Stop?: number;
            Recurse?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new DownloadReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Start != null) {
                message.Start = data.Start;
            }
            if (data.Stop != null) {
                message.Stop = data.Stop;
            }
            if (data.Recurse != null) {
                message.Recurse = data.Recurse;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Start?: number;
                Stop?: number;
                Recurse?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Start != null) {
                data.Start = this.Start;
            }
            if (this.Stop != null) {
                data.Stop = this.Stop;
            }
            if (this.Recurse != null) {
                data.Recurse = this.Recurse;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Start !== undefined)
                writer.writeInt64(2, this.Start);
            if (this.Stop !== undefined)
                writer.writeInt64(3, this.Stop);
            if (this.Recurse !== undefined)
                writer.writeBool(4, this.Recurse);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.Start = reader.readInt64();
                        break;
                    case 3:
                        message.Stop = reader.readInt64();
                        break;
                    case 4:
                        message.Recurse = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadReq {
            return DownloadReq.deserialize(bytes);
        }
    }
    export class Download extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Encoder?: string;
            Exists?: boolean;
            Start?: number;
            Stop?: number;
            Data?: Uint8Array;
            IsDir?: boolean;
            ReadFiles?: number;
            UnreadableFiles?: number;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Encoder" in data && data.Encoder != undefined) {
                    this.Encoder = data.Encoder;
                }
                if ("Exists" in data && data.Exists != undefined) {
                    this.Exists = data.Exists;
                }
                if ("Start" in data && data.Start != undefined) {
                    this.Start = data.Start;
                }
                if ("Stop" in data && data.Stop != undefined) {
                    this.Stop = data.Stop;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("IsDir" in data && data.IsDir != undefined) {
                    this.IsDir = data.IsDir;
                }
                if ("ReadFiles" in data && data.ReadFiles != undefined) {
                    this.ReadFiles = data.ReadFiles;
                }
                if ("UnreadableFiles" in data && data.UnreadableFiles != undefined) {
                    this.UnreadableFiles = data.UnreadableFiles;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Encoder() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Encoder(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Exists() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set Exists(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get Start() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set Start(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Stop() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set Stop(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get IsDir() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set IsDir(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get ReadFiles() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set ReadFiles(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get UnreadableFiles() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set UnreadableFiles(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Encoder?: string;
            Exists?: boolean;
            Start?: number;
            Stop?: number;
            Data?: Uint8Array;
            IsDir?: boolean;
            ReadFiles?: number;
            UnreadableFiles?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Download({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Encoder != null) {
                message.Encoder = data.Encoder;
            }
            if (data.Exists != null) {
                message.Exists = data.Exists;
            }
            if (data.Start != null) {
                message.Start = data.Start;
            }
            if (data.Stop != null) {
                message.Stop = data.Stop;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.IsDir != null) {
                message.IsDir = data.IsDir;
            }
            if (data.ReadFiles != null) {
                message.ReadFiles = data.ReadFiles;
            }
            if (data.UnreadableFiles != null) {
                message.UnreadableFiles = data.UnreadableFiles;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Encoder?: string;
                Exists?: boolean;
                Start?: number;
                Stop?: number;
                Data?: Uint8Array;
                IsDir?: boolean;
                ReadFiles?: number;
                UnreadableFiles?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Encoder != null) {
                data.Encoder = this.Encoder;
            }
            if (this.Exists != null) {
                data.Exists = this.Exists;
            }
            if (this.Start != null) {
                data.Start = this.Start;
            }
            if (this.Stop != null) {
                data.Stop = this.Stop;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.IsDir != null) {
                data.IsDir = this.IsDir;
            }
            if (this.ReadFiles != null) {
                data.ReadFiles = this.ReadFiles;
            }
            if (this.UnreadableFiles != null) {
                data.UnreadableFiles = this.UnreadableFiles;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (typeof this.Encoder === "string" && this.Encoder.length)
                writer.writeString(2, this.Encoder);
            if (this.Exists !== undefined)
                writer.writeBool(3, this.Exists);
            if (this.Start !== undefined)
                writer.writeInt64(4, this.Start);
            if (this.Stop !== undefined)
                writer.writeInt64(5, this.Stop);
            if (this.Data !== undefined)
                writer.writeBytes(6, this.Data);
            if (this.IsDir !== undefined)
                writer.writeBool(7, this.IsDir);
            if (this.ReadFiles !== undefined)
                writer.writeInt32(8, this.ReadFiles);
            if (this.UnreadableFiles !== undefined)
                writer.writeInt32(10, this.UnreadableFiles);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Download {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Download();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.Encoder = reader.readString();
                        break;
                    case 3:
                        message.Exists = reader.readBool();
                        break;
                    case 4:
                        message.Start = reader.readInt64();
                        break;
                    case 5:
                        message.Stop = reader.readInt64();
                        break;
                    case 6:
                        message.Data = reader.readBytes();
                        break;
                    case 7:
                        message.IsDir = reader.readBool();
                        break;
                    case 8:
                        message.ReadFiles = reader.readInt32();
                        break;
                    case 10:
                        message.UnreadableFiles = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Download {
            return Download.deserialize(bytes);
        }
    }
    export class UploadReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Encoder?: string;
            Data?: Uint8Array;
            IsIOC?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Encoder" in data && data.Encoder != undefined) {
                    this.Encoder = data.Encoder;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("IsIOC" in data && data.IsIOC != undefined) {
                    this.IsIOC = data.IsIOC;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Encoder() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Encoder(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get IsIOC() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set IsIOC(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Encoder?: string;
            Data?: Uint8Array;
            IsIOC?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new UploadReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Encoder != null) {
                message.Encoder = data.Encoder;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.IsIOC != null) {
                message.IsIOC = data.IsIOC;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Encoder?: string;
                Data?: Uint8Array;
                IsIOC?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Encoder != null) {
                data.Encoder = this.Encoder;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.IsIOC != null) {
                data.IsIOC = this.IsIOC;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (typeof this.Encoder === "string" && this.Encoder.length)
                writer.writeString(2, this.Encoder);
            if (this.Data !== undefined)
                writer.writeBytes(3, this.Data);
            if (this.IsIOC !== undefined)
                writer.writeBool(4, this.IsIOC);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.Encoder = reader.readString();
                        break;
                    case 3:
                        message.Data = reader.readBytes();
                        break;
                    case 4:
                        message.IsIOC = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadReq {
            return UploadReq.deserialize(bytes);
        }
    }
    export class Upload extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Upload({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Upload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Upload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Upload {
            return Upload.deserialize(bytes);
        }
    }
    export class ProcessDumpReq extends pb_1.Message {
        constructor(data?: any[] | {
            Pid?: number;
            Timeout?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Timeout" in data && data.Timeout != undefined) {
                    this.Timeout = data.Timeout;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Pid() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Timeout() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Timeout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Pid?: number;
            Timeout?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ProcessDumpReq({});
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Timeout != null) {
                message.Timeout = data.Timeout;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Pid?: number;
                Timeout?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Timeout != null) {
                data.Timeout = this.Timeout;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Pid !== undefined)
                writer.writeInt32(1, this.Pid);
            if (this.Timeout !== undefined)
                writer.writeInt32(2, this.Timeout);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessDumpReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessDumpReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Pid = reader.readInt32();
                        break;
                    case 2:
                        message.Timeout = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessDumpReq {
            return ProcessDumpReq.deserialize(bytes);
        }
    }
    export class ProcessDump extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new ProcessDump({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessDump {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessDump();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessDump {
            return ProcessDump.deserialize(bytes);
        }
    }
    export class RunAsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Username?: string;
            ProcessName?: string;
            Args?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("ProcessName" in data && data.ProcessName != undefined) {
                    this.ProcessName = data.ProcessName;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Username() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ProcessName() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProcessName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Args(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Username?: string;
            ProcessName?: string;
            Args?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RunAsReq({});
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.ProcessName != null) {
                message.ProcessName = data.ProcessName;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Username?: string;
                ProcessName?: string;
                Args?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.ProcessName != null) {
                data.ProcessName = this.ProcessName;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(1, this.Username);
            if (typeof this.ProcessName === "string" && this.ProcessName.length)
                writer.writeString(2, this.ProcessName);
            if (typeof this.Args === "string" && this.Args.length)
                writer.writeString(3, this.Args);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunAsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunAsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Username = reader.readString();
                        break;
                    case 2:
                        message.ProcessName = reader.readString();
                        break;
                    case 3:
                        message.Args = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunAsReq {
            return RunAsReq.deserialize(bytes);
        }
    }
    export class RunAs extends pb_1.Message {
        constructor(data?: any[] | {
            Output?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Output() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Output(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Output?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RunAs({});
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Output?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Output === "string" && this.Output.length)
                writer.writeString(1, this.Output);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunAs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunAs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Output = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunAs {
            return RunAs.deserialize(bytes);
        }
    }
    export class ImpersonateReq extends pb_1.Message {
        constructor(data?: any[] | {
            Username?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Username() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Username?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ImpersonateReq({});
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Username?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(1, this.Username);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImpersonateReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImpersonateReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Username = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImpersonateReq {
            return ImpersonateReq.deserialize(bytes);
        }
    }
    export class Impersonate extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Impersonate({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Impersonate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Impersonate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Impersonate {
            return Impersonate.deserialize(bytes);
        }
    }
    export class RevToSelfReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RevToSelfReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevToSelfReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevToSelfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevToSelfReq {
            return RevToSelfReq.deserialize(bytes);
        }
    }
    export class RevToSelf extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RevToSelf({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevToSelf {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevToSelf();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevToSelf {
            return RevToSelf.deserialize(bytes);
        }
    }
    export class CurrentTokenOwnerReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new CurrentTokenOwnerReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentTokenOwnerReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentTokenOwnerReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentTokenOwnerReq {
            return CurrentTokenOwnerReq.deserialize(bytes);
        }
    }
    export class CurrentTokenOwner extends pb_1.Message {
        constructor(data?: any[] | {
            Output?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Output() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Output(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Output?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new CurrentTokenOwner({});
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Output?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Output === "string" && this.Output.length)
                writer.writeString(1, this.Output);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentTokenOwner {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentTokenOwner();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Output = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentTokenOwner {
            return CurrentTokenOwner.deserialize(bytes);
        }
    }
    export class InvokeGetSystemReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            HostingProcess?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("HostingProcess" in data && data.HostingProcess != undefined) {
                    this.HostingProcess = data.HostingProcess;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get HostingProcess() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set HostingProcess(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            HostingProcess?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new InvokeGetSystemReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.HostingProcess != null) {
                message.HostingProcess = data.HostingProcess;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                HostingProcess?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.HostingProcess != null) {
                data.HostingProcess = this.HostingProcess;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (typeof this.HostingProcess === "string" && this.HostingProcess.length)
                writer.writeString(2, this.HostingProcess);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeGetSystemReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeGetSystemReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.HostingProcess = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeGetSystemReq {
            return InvokeGetSystemReq.deserialize(bytes);
        }
    }
    export class GetSystem extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new GetSystem({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSystem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSystem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSystem {
            return GetSystem.deserialize(bytes);
        }
    }
    export class MakeTokenReq extends pb_1.Message {
        constructor(data?: any[] | {
            Username?: string;
            Password?: string;
            Domain?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("Password" in data && data.Password != undefined) {
                    this.Password = data.Password;
                }
                if ("Domain" in data && data.Domain != undefined) {
                    this.Domain = data.Domain;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Username() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Password() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Domain() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Domain(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Username?: string;
            Password?: string;
            Domain?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new MakeTokenReq({});
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.Password != null) {
                message.Password = data.Password;
            }
            if (data.Domain != null) {
                message.Domain = data.Domain;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Username?: string;
                Password?: string;
                Domain?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.Password != null) {
                data.Password = this.Password;
            }
            if (this.Domain != null) {
                data.Domain = this.Domain;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(1, this.Username);
            if (typeof this.Password === "string" && this.Password.length)
                writer.writeString(2, this.Password);
            if (typeof this.Domain === "string" && this.Domain.length)
                writer.writeString(3, this.Domain);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MakeTokenReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MakeTokenReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Username = reader.readString();
                        break;
                    case 2:
                        message.Password = reader.readString();
                        break;
                    case 3:
                        message.Domain = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MakeTokenReq {
            return MakeTokenReq.deserialize(bytes);
        }
    }
    export class MakeToken extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new MakeToken({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MakeToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MakeToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MakeToken {
            return MakeToken.deserialize(bytes);
        }
    }
    export class TaskReq extends pb_1.Message {
        constructor(data?: any[] | {
            Encoder?: string;
            RWXPages?: boolean;
            Pid?: number;
            Data?: Uint8Array;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Encoder" in data && data.Encoder != undefined) {
                    this.Encoder = data.Encoder;
                }
                if ("RWXPages" in data && data.RWXPages != undefined) {
                    this.RWXPages = data.RWXPages;
                }
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Encoder() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Encoder(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get RWXPages() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set RWXPages(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Pid() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Encoder?: string;
            RWXPages?: boolean;
            Pid?: number;
            Data?: Uint8Array;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new TaskReq({});
            if (data.Encoder != null) {
                message.Encoder = data.Encoder;
            }
            if (data.RWXPages != null) {
                message.RWXPages = data.RWXPages;
            }
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Encoder?: string;
                RWXPages?: boolean;
                Pid?: number;
                Data?: Uint8Array;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Encoder != null) {
                data.Encoder = this.Encoder;
            }
            if (this.RWXPages != null) {
                data.RWXPages = this.RWXPages;
            }
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Encoder === "string" && this.Encoder.length)
                writer.writeString(1, this.Encoder);
            if (this.RWXPages !== undefined)
                writer.writeBool(2, this.RWXPages);
            if (this.Pid !== undefined)
                writer.writeUint32(3, this.Pid);
            if (this.Data !== undefined)
                writer.writeBytes(4, this.Data);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaskReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Encoder = reader.readString();
                        break;
                    case 2:
                        message.RWXPages = reader.readBool();
                        break;
                    case 3:
                        message.Pid = reader.readUint32();
                        break;
                    case 4:
                        message.Data = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaskReq {
            return TaskReq.deserialize(bytes);
        }
    }
    export class Task extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Task({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Task {
            return Task.deserialize(bytes);
        }
    }
    export class ExecuteAssemblyReq extends pb_1.Message {
        constructor(data?: any[] | {
            Assembly?: Uint8Array;
            Arguments?: string;
            Process?: string;
            IsDLL?: boolean;
            Arch?: string;
            ClassName?: string;
            Method?: string;
            AppDomain?: string;
            PPid?: number;
            ProcessArgs?: string[];
            InProcess?: boolean;
            Runtime?: string;
            AmsiBypass?: boolean;
            EtwBypass?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Assembly" in data && data.Assembly != undefined) {
                    this.Assembly = data.Assembly;
                }
                if ("Arguments" in data && data.Arguments != undefined) {
                    this.Arguments = data.Arguments;
                }
                if ("Process" in data && data.Process != undefined) {
                    this.Process = data.Process;
                }
                if ("IsDLL" in data && data.IsDLL != undefined) {
                    this.IsDLL = data.IsDLL;
                }
                if ("Arch" in data && data.Arch != undefined) {
                    this.Arch = data.Arch;
                }
                if ("ClassName" in data && data.ClassName != undefined) {
                    this.ClassName = data.ClassName;
                }
                if ("Method" in data && data.Method != undefined) {
                    this.Method = data.Method;
                }
                if ("AppDomain" in data && data.AppDomain != undefined) {
                    this.AppDomain = data.AppDomain;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("ProcessArgs" in data && data.ProcessArgs != undefined) {
                    this.ProcessArgs = data.ProcessArgs;
                }
                if ("InProcess" in data && data.InProcess != undefined) {
                    this.InProcess = data.InProcess;
                }
                if ("Runtime" in data && data.Runtime != undefined) {
                    this.Runtime = data.Runtime;
                }
                if ("AmsiBypass" in data && data.AmsiBypass != undefined) {
                    this.AmsiBypass = data.AmsiBypass;
                }
                if ("EtwBypass" in data && data.EtwBypass != undefined) {
                    this.EtwBypass = data.EtwBypass;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Assembly() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Assembly(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Arguments() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Arguments(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Process() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Process(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get IsDLL() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set IsDLL(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get Arch() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Arch(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ClassName() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set ClassName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get Method() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set Method(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get AppDomain() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set AppDomain(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ProcessArgs() {
            return pb_1.Message.getField(this, 11) as string[];
        }
        set ProcessArgs(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get InProcess() {
            return pb_1.Message.getField(this, 12) as boolean;
        }
        set InProcess(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get Runtime() {
            return pb_1.Message.getField(this, 13) as string;
        }
        set Runtime(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get AmsiBypass() {
            return pb_1.Message.getField(this, 14) as boolean;
        }
        set AmsiBypass(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get EtwBypass() {
            return pb_1.Message.getField(this, 15) as boolean;
        }
        set EtwBypass(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Assembly?: Uint8Array;
            Arguments?: string;
            Process?: string;
            IsDLL?: boolean;
            Arch?: string;
            ClassName?: string;
            Method?: string;
            AppDomain?: string;
            PPid?: number;
            ProcessArgs?: string[];
            InProcess?: boolean;
            Runtime?: string;
            AmsiBypass?: boolean;
            EtwBypass?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ExecuteAssemblyReq({});
            if (data.Assembly != null) {
                message.Assembly = data.Assembly;
            }
            if (data.Arguments != null) {
                message.Arguments = data.Arguments;
            }
            if (data.Process != null) {
                message.Process = data.Process;
            }
            if (data.IsDLL != null) {
                message.IsDLL = data.IsDLL;
            }
            if (data.Arch != null) {
                message.Arch = data.Arch;
            }
            if (data.ClassName != null) {
                message.ClassName = data.ClassName;
            }
            if (data.Method != null) {
                message.Method = data.Method;
            }
            if (data.AppDomain != null) {
                message.AppDomain = data.AppDomain;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.ProcessArgs != null) {
                message.ProcessArgs = data.ProcessArgs;
            }
            if (data.InProcess != null) {
                message.InProcess = data.InProcess;
            }
            if (data.Runtime != null) {
                message.Runtime = data.Runtime;
            }
            if (data.AmsiBypass != null) {
                message.AmsiBypass = data.AmsiBypass;
            }
            if (data.EtwBypass != null) {
                message.EtwBypass = data.EtwBypass;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Assembly?: Uint8Array;
                Arguments?: string;
                Process?: string;
                IsDLL?: boolean;
                Arch?: string;
                ClassName?: string;
                Method?: string;
                AppDomain?: string;
                PPid?: number;
                ProcessArgs?: string[];
                InProcess?: boolean;
                Runtime?: string;
                AmsiBypass?: boolean;
                EtwBypass?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Assembly != null) {
                data.Assembly = this.Assembly;
            }
            if (this.Arguments != null) {
                data.Arguments = this.Arguments;
            }
            if (this.Process != null) {
                data.Process = this.Process;
            }
            if (this.IsDLL != null) {
                data.IsDLL = this.IsDLL;
            }
            if (this.Arch != null) {
                data.Arch = this.Arch;
            }
            if (this.ClassName != null) {
                data.ClassName = this.ClassName;
            }
            if (this.Method != null) {
                data.Method = this.Method;
            }
            if (this.AppDomain != null) {
                data.AppDomain = this.AppDomain;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.ProcessArgs != null) {
                data.ProcessArgs = this.ProcessArgs;
            }
            if (this.InProcess != null) {
                data.InProcess = this.InProcess;
            }
            if (this.Runtime != null) {
                data.Runtime = this.Runtime;
            }
            if (this.AmsiBypass != null) {
                data.AmsiBypass = this.AmsiBypass;
            }
            if (this.EtwBypass != null) {
                data.EtwBypass = this.EtwBypass;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Assembly !== undefined)
                writer.writeBytes(1, this.Assembly);
            if (typeof this.Arguments === "string" && this.Arguments.length)
                writer.writeString(2, this.Arguments);
            if (typeof this.Process === "string" && this.Process.length)
                writer.writeString(3, this.Process);
            if (this.IsDLL !== undefined)
                writer.writeBool(4, this.IsDLL);
            if (typeof this.Arch === "string" && this.Arch.length)
                writer.writeString(5, this.Arch);
            if (typeof this.ClassName === "string" && this.ClassName.length)
                writer.writeString(6, this.ClassName);
            if (typeof this.Method === "string" && this.Method.length)
                writer.writeString(7, this.Method);
            if (typeof this.AppDomain === "string" && this.AppDomain.length)
                writer.writeString(8, this.AppDomain);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.ProcessArgs !== undefined)
                writer.writeRepeatedString(11, this.ProcessArgs);
            if (this.InProcess !== undefined)
                writer.writeBool(12, this.InProcess);
            if (typeof this.Runtime === "string" && this.Runtime.length)
                writer.writeString(13, this.Runtime);
            if (this.AmsiBypass !== undefined)
                writer.writeBool(14, this.AmsiBypass);
            if (this.EtwBypass !== undefined)
                writer.writeBool(15, this.EtwBypass);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteAssemblyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteAssemblyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Assembly = reader.readBytes();
                        break;
                    case 2:
                        message.Arguments = reader.readString();
                        break;
                    case 3:
                        message.Process = reader.readString();
                        break;
                    case 4:
                        message.IsDLL = reader.readBool();
                        break;
                    case 5:
                        message.Arch = reader.readString();
                        break;
                    case 6:
                        message.ClassName = reader.readString();
                        break;
                    case 7:
                        message.Method = reader.readString();
                        break;
                    case 8:
                        message.AppDomain = reader.readString();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 12:
                        message.InProcess = reader.readBool();
                        break;
                    case 13:
                        message.Runtime = reader.readString();
                        break;
                    case 14:
                        message.AmsiBypass = reader.readBool();
                        break;
                    case 15:
                        message.EtwBypass = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteAssemblyReq {
            return ExecuteAssemblyReq.deserialize(bytes);
        }
    }
    export class InvokeExecuteAssemblyReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            process?: string;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("process" in data && data.process != undefined) {
                    this.process = data.process;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("ProcessArgs" in data && data.ProcessArgs != undefined) {
                    this.ProcessArgs = data.ProcessArgs;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get process() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set process(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ProcessArgs() {
            return pb_1.Message.getField(this, 11) as string[];
        }
        set ProcessArgs(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            process?: string;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new InvokeExecuteAssemblyReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.process != null) {
                message.process = data.process;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.ProcessArgs != null) {
                message.ProcessArgs = data.ProcessArgs;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                process?: string;
                PPid?: number;
                ProcessArgs?: string[];
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.process != null) {
                data.process = this.process;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.ProcessArgs != null) {
                data.ProcessArgs = this.ProcessArgs;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (typeof this.process === "string" && this.process.length)
                writer.writeString(2, this.process);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.ProcessArgs !== undefined)
                writer.writeRepeatedString(11, this.ProcessArgs);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeExecuteAssemblyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeExecuteAssemblyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.process = reader.readString();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeExecuteAssemblyReq {
            return InvokeExecuteAssemblyReq.deserialize(bytes);
        }
    }
    export class InvokeInProcExecuteAssemblyReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            Arguments?: string[];
            Runtime?: string;
            AmsiBypass?: boolean;
            EtwBypass?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Arguments" in data && data.Arguments != undefined) {
                    this.Arguments = data.Arguments;
                }
                if ("Runtime" in data && data.Runtime != undefined) {
                    this.Runtime = data.Runtime;
                }
                if ("AmsiBypass" in data && data.AmsiBypass != undefined) {
                    this.AmsiBypass = data.AmsiBypass;
                }
                if ("EtwBypass" in data && data.EtwBypass != undefined) {
                    this.EtwBypass = data.EtwBypass;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Arguments() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set Arguments(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get Runtime() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Runtime(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get AmsiBypass() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set AmsiBypass(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get EtwBypass() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set EtwBypass(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            Arguments?: string[];
            Runtime?: string;
            AmsiBypass?: boolean;
            EtwBypass?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new InvokeInProcExecuteAssemblyReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Arguments != null) {
                message.Arguments = data.Arguments;
            }
            if (data.Runtime != null) {
                message.Runtime = data.Runtime;
            }
            if (data.AmsiBypass != null) {
                message.AmsiBypass = data.AmsiBypass;
            }
            if (data.EtwBypass != null) {
                message.EtwBypass = data.EtwBypass;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                Arguments?: string[];
                Runtime?: string;
                AmsiBypass?: boolean;
                EtwBypass?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Arguments != null) {
                data.Arguments = this.Arguments;
            }
            if (this.Runtime != null) {
                data.Runtime = this.Runtime;
            }
            if (this.AmsiBypass != null) {
                data.AmsiBypass = this.AmsiBypass;
            }
            if (this.EtwBypass != null) {
                data.EtwBypass = this.EtwBypass;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (this.Arguments !== undefined)
                writer.writeRepeatedString(2, this.Arguments);
            if (typeof this.Runtime === "string" && this.Runtime.length)
                writer.writeString(3, this.Runtime);
            if (this.AmsiBypass !== undefined)
                writer.writeBool(4, this.AmsiBypass);
            if (this.EtwBypass !== undefined)
                writer.writeBool(5, this.EtwBypass);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeInProcExecuteAssemblyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeInProcExecuteAssemblyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.Runtime = reader.readString();
                        break;
                    case 4:
                        message.AmsiBypass = reader.readBool();
                        break;
                    case 5:
                        message.EtwBypass = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeInProcExecuteAssemblyReq {
            return InvokeInProcExecuteAssemblyReq.deserialize(bytes);
        }
    }
    export class ExecuteAssembly extends pb_1.Message {
        constructor(data?: any[] | {
            Output?: Uint8Array;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Output() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Output(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Output?: Uint8Array;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new ExecuteAssembly({});
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Output?: Uint8Array;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Output !== undefined)
                writer.writeBytes(1, this.Output);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteAssembly {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteAssembly();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Output = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteAssembly {
            return ExecuteAssembly.deserialize(bytes);
        }
    }
    export class InvokeMigrateReq extends pb_1.Message {
        constructor(data?: any[] | {
            Pid?: number;
            Data?: Uint8Array;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Pid() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Pid?: number;
            Data?: Uint8Array;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new InvokeMigrateReq({});
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Pid?: number;
                Data?: Uint8Array;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Pid !== undefined)
                writer.writeUint32(1, this.Pid);
            if (this.Data !== undefined)
                writer.writeBytes(2, this.Data);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeMigrateReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeMigrateReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Pid = reader.readUint32();
                        break;
                    case 2:
                        message.Data = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeMigrateReq {
            return InvokeMigrateReq.deserialize(bytes);
        }
    }
    export class Migrate extends pb_1.Message {
        constructor(data?: any[] | {
            Success?: boolean;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Success" in data && data.Success != undefined) {
                    this.Success = data.Success;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Success() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set Success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Success?: boolean;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Migrate({});
            if (data.Success != null) {
                message.Success = data.Success;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Success?: boolean;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Success != null) {
                data.Success = this.Success;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Success !== undefined)
                writer.writeBool(1, this.Success);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Migrate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Migrate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Success = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Migrate {
            return Migrate.deserialize(bytes);
        }
    }
    export class ExecuteReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Args?: string[];
            Output?: boolean;
            Stdout?: string;
            Stderr?: string;
            PPid?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("Stdout" in data && data.Stdout != undefined) {
                    this.Stdout = data.Stdout;
                }
                if ("Stderr" in data && data.Stderr != undefined) {
                    this.Stderr = data.Stderr;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set Args(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get Output() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set Output(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get Stdout() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Stdout(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Stderr() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Stderr(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Args?: string[];
            Output?: boolean;
            Stdout?: string;
            Stderr?: string;
            PPid?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ExecuteReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.Stdout != null) {
                message.Stdout = data.Stdout;
            }
            if (data.Stderr != null) {
                message.Stderr = data.Stderr;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Args?: string[];
                Output?: boolean;
                Stdout?: string;
                Stderr?: string;
                PPid?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.Stdout != null) {
                data.Stdout = this.Stdout;
            }
            if (this.Stderr != null) {
                data.Stderr = this.Stderr;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Args !== undefined)
                writer.writeRepeatedString(2, this.Args);
            if (this.Output !== undefined)
                writer.writeBool(3, this.Output);
            if (typeof this.Stdout === "string" && this.Stdout.length)
                writer.writeString(4, this.Stdout);
            if (typeof this.Stderr === "string" && this.Stderr.length)
                writer.writeString(5, this.Stderr);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.Output = reader.readBool();
                        break;
                    case 4:
                        message.Stdout = reader.readString();
                        break;
                    case 5:
                        message.Stderr = reader.readString();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteReq {
            return ExecuteReq.deserialize(bytes);
        }
    }
    export class ExecuteWindowsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            Args?: string[];
            Output?: boolean;
            Stdout?: string;
            Stderr?: string;
            UseToken?: boolean;
            PPid?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("Stdout" in data && data.Stdout != undefined) {
                    this.Stdout = data.Stdout;
                }
                if ("Stderr" in data && data.Stderr != undefined) {
                    this.Stderr = data.Stderr;
                }
                if ("UseToken" in data && data.UseToken != undefined) {
                    this.UseToken = data.UseToken;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set Args(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get Output() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set Output(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get Stdout() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Stdout(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Stderr() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Stderr(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get UseToken() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set UseToken(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            Args?: string[];
            Output?: boolean;
            Stdout?: string;
            Stderr?: string;
            UseToken?: boolean;
            PPid?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ExecuteWindowsReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.Stdout != null) {
                message.Stdout = data.Stdout;
            }
            if (data.Stderr != null) {
                message.Stderr = data.Stderr;
            }
            if (data.UseToken != null) {
                message.UseToken = data.UseToken;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                Args?: string[];
                Output?: boolean;
                Stdout?: string;
                Stderr?: string;
                UseToken?: boolean;
                PPid?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.Stdout != null) {
                data.Stdout = this.Stdout;
            }
            if (this.Stderr != null) {
                data.Stderr = this.Stderr;
            }
            if (this.UseToken != null) {
                data.UseToken = this.UseToken;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.Args !== undefined)
                writer.writeRepeatedString(2, this.Args);
            if (this.Output !== undefined)
                writer.writeBool(3, this.Output);
            if (typeof this.Stdout === "string" && this.Stdout.length)
                writer.writeString(4, this.Stdout);
            if (typeof this.Stderr === "string" && this.Stderr.length)
                writer.writeString(5, this.Stderr);
            if (this.UseToken !== undefined)
                writer.writeBool(6, this.UseToken);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteWindowsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteWindowsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.Output = reader.readBool();
                        break;
                    case 4:
                        message.Stdout = reader.readString();
                        break;
                    case 5:
                        message.Stderr = reader.readString();
                        break;
                    case 6:
                        message.UseToken = reader.readBool();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteWindowsReq {
            return ExecuteWindowsReq.deserialize(bytes);
        }
    }
    export class Execute extends pb_1.Message {
        constructor(data?: any[] | {
            Status?: number;
            Stdout?: Uint8Array;
            Stderr?: Uint8Array;
            Pid?: number;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Status" in data && data.Status != undefined) {
                    this.Status = data.Status;
                }
                if ("Stdout" in data && data.Stdout != undefined) {
                    this.Stdout = data.Stdout;
                }
                if ("Stderr" in data && data.Stderr != undefined) {
                    this.Stderr = data.Stderr;
                }
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Status() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Status(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Stdout() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set Stdout(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Stderr() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set Stderr(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get Pid() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Status?: number;
            Stdout?: Uint8Array;
            Stderr?: Uint8Array;
            Pid?: number;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Execute({});
            if (data.Status != null) {
                message.Status = data.Status;
            }
            if (data.Stdout != null) {
                message.Stdout = data.Stdout;
            }
            if (data.Stderr != null) {
                message.Stderr = data.Stderr;
            }
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Status?: number;
                Stdout?: Uint8Array;
                Stderr?: Uint8Array;
                Pid?: number;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Status != null) {
                data.Status = this.Status;
            }
            if (this.Stdout != null) {
                data.Stdout = this.Stdout;
            }
            if (this.Stderr != null) {
                data.Stderr = this.Stderr;
            }
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Status !== undefined)
                writer.writeUint32(1, this.Status);
            if (this.Stdout !== undefined)
                writer.writeBytes(2, this.Stdout);
            if (this.Stderr !== undefined)
                writer.writeBytes(3, this.Stderr);
            if (this.Pid !== undefined)
                writer.writeUint32(4, this.Pid);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Execute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Execute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Status = reader.readUint32();
                        break;
                    case 2:
                        message.Stdout = reader.readBytes();
                        break;
                    case 3:
                        message.Stderr = reader.readBytes();
                        break;
                    case 4:
                        message.Pid = reader.readUint32();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Execute {
            return Execute.deserialize(bytes);
        }
    }
    export class SideloadReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            ProcessName?: string;
            Args?: string;
            EntryPoint?: string;
            Kill?: boolean;
            isDLL?: boolean;
            isUnicode?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("ProcessName" in data && data.ProcessName != undefined) {
                    this.ProcessName = data.ProcessName;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("EntryPoint" in data && data.EntryPoint != undefined) {
                    this.EntryPoint = data.EntryPoint;
                }
                if ("Kill" in data && data.Kill != undefined) {
                    this.Kill = data.Kill;
                }
                if ("isDLL" in data && data.isDLL != undefined) {
                    this.isDLL = data.isDLL;
                }
                if ("isUnicode" in data && data.isUnicode != undefined) {
                    this.isUnicode = data.isUnicode;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("ProcessArgs" in data && data.ProcessArgs != undefined) {
                    this.ProcessArgs = data.ProcessArgs;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ProcessName() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProcessName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Args(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get EntryPoint() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set EntryPoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Kill() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set Kill(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get isDLL() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set isDLL(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get isUnicode() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set isUnicode(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ProcessArgs() {
            return pb_1.Message.getField(this, 11) as string[];
        }
        set ProcessArgs(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            ProcessName?: string;
            Args?: string;
            EntryPoint?: string;
            Kill?: boolean;
            isDLL?: boolean;
            isUnicode?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new SideloadReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.ProcessName != null) {
                message.ProcessName = data.ProcessName;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.EntryPoint != null) {
                message.EntryPoint = data.EntryPoint;
            }
            if (data.Kill != null) {
                message.Kill = data.Kill;
            }
            if (data.isDLL != null) {
                message.isDLL = data.isDLL;
            }
            if (data.isUnicode != null) {
                message.isUnicode = data.isUnicode;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.ProcessArgs != null) {
                message.ProcessArgs = data.ProcessArgs;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                ProcessName?: string;
                Args?: string;
                EntryPoint?: string;
                Kill?: boolean;
                isDLL?: boolean;
                isUnicode?: boolean;
                PPid?: number;
                ProcessArgs?: string[];
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.ProcessName != null) {
                data.ProcessName = this.ProcessName;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.EntryPoint != null) {
                data.EntryPoint = this.EntryPoint;
            }
            if (this.Kill != null) {
                data.Kill = this.Kill;
            }
            if (this.isDLL != null) {
                data.isDLL = this.isDLL;
            }
            if (this.isUnicode != null) {
                data.isUnicode = this.isUnicode;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.ProcessArgs != null) {
                data.ProcessArgs = this.ProcessArgs;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (typeof this.ProcessName === "string" && this.ProcessName.length)
                writer.writeString(2, this.ProcessName);
            if (typeof this.Args === "string" && this.Args.length)
                writer.writeString(3, this.Args);
            if (typeof this.EntryPoint === "string" && this.EntryPoint.length)
                writer.writeString(4, this.EntryPoint);
            if (this.Kill !== undefined)
                writer.writeBool(5, this.Kill);
            if (this.isDLL !== undefined)
                writer.writeBool(6, this.isDLL);
            if (this.isUnicode !== undefined)
                writer.writeBool(7, this.isUnicode);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.ProcessArgs !== undefined)
                writer.writeRepeatedString(11, this.ProcessArgs);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SideloadReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SideloadReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.ProcessName = reader.readString();
                        break;
                    case 3:
                        message.Args = reader.readString();
                        break;
                    case 4:
                        message.EntryPoint = reader.readString();
                        break;
                    case 5:
                        message.Kill = reader.readBool();
                        break;
                    case 6:
                        message.isDLL = reader.readBool();
                        break;
                    case 7:
                        message.isUnicode = reader.readBool();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SideloadReq {
            return SideloadReq.deserialize(bytes);
        }
    }
    export class Sideload extends pb_1.Message {
        constructor(data?: any[] | {
            Result?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Result" in data && data.Result != undefined) {
                    this.Result = data.Result;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Result() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Result?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Sideload({});
            if (data.Result != null) {
                message.Result = data.Result;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Result?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Result != null) {
                data.Result = this.Result;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Result === "string" && this.Result.length)
                writer.writeString(1, this.Result);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sideload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sideload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Result = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Sideload {
            return Sideload.deserialize(bytes);
        }
    }
    export class InvokeSpawnDllReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            ProcessName?: string;
            Args?: string;
            EntryPoint?: string;
            Kill?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("ProcessName" in data && data.ProcessName != undefined) {
                    this.ProcessName = data.ProcessName;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("EntryPoint" in data && data.EntryPoint != undefined) {
                    this.EntryPoint = data.EntryPoint;
                }
                if ("Kill" in data && data.Kill != undefined) {
                    this.Kill = data.Kill;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("ProcessArgs" in data && data.ProcessArgs != undefined) {
                    this.ProcessArgs = data.ProcessArgs;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ProcessName() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProcessName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Args(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get EntryPoint() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set EntryPoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Kill() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set Kill(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ProcessArgs() {
            return pb_1.Message.getField(this, 11) as string[];
        }
        set ProcessArgs(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            ProcessName?: string;
            Args?: string;
            EntryPoint?: string;
            Kill?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new InvokeSpawnDllReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.ProcessName != null) {
                message.ProcessName = data.ProcessName;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.EntryPoint != null) {
                message.EntryPoint = data.EntryPoint;
            }
            if (data.Kill != null) {
                message.Kill = data.Kill;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.ProcessArgs != null) {
                message.ProcessArgs = data.ProcessArgs;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                ProcessName?: string;
                Args?: string;
                EntryPoint?: string;
                Kill?: boolean;
                PPid?: number;
                ProcessArgs?: string[];
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.ProcessName != null) {
                data.ProcessName = this.ProcessName;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.EntryPoint != null) {
                data.EntryPoint = this.EntryPoint;
            }
            if (this.Kill != null) {
                data.Kill = this.Kill;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.ProcessArgs != null) {
                data.ProcessArgs = this.ProcessArgs;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (typeof this.ProcessName === "string" && this.ProcessName.length)
                writer.writeString(2, this.ProcessName);
            if (typeof this.Args === "string" && this.Args.length)
                writer.writeString(3, this.Args);
            if (typeof this.EntryPoint === "string" && this.EntryPoint.length)
                writer.writeString(4, this.EntryPoint);
            if (this.Kill !== undefined)
                writer.writeBool(5, this.Kill);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.ProcessArgs !== undefined)
                writer.writeRepeatedString(11, this.ProcessArgs);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeSpawnDllReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeSpawnDllReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.ProcessName = reader.readString();
                        break;
                    case 3:
                        message.Args = reader.readString();
                        break;
                    case 4:
                        message.EntryPoint = reader.readString();
                        break;
                    case 5:
                        message.Kill = reader.readBool();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeSpawnDllReq {
            return InvokeSpawnDllReq.deserialize(bytes);
        }
    }
    export class SpawnDllReq extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            ProcessName?: string;
            Offset?: number;
            Args?: string;
            Kill?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("ProcessName" in data && data.ProcessName != undefined) {
                    this.ProcessName = data.ProcessName;
                }
                if ("Offset" in data && data.Offset != undefined) {
                    this.Offset = data.Offset;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("Kill" in data && data.Kill != undefined) {
                    this.Kill = data.Kill;
                }
                if ("PPid" in data && data.PPid != undefined) {
                    this.PPid = data.PPid;
                }
                if ("ProcessArgs" in data && data.ProcessArgs != undefined) {
                    this.ProcessArgs = data.ProcessArgs;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ProcessName() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProcessName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Offset() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Offset(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Args(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Kill() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set Kill(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get PPid() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set PPid(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ProcessArgs() {
            return pb_1.Message.getField(this, 11) as string[];
        }
        set ProcessArgs(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            ProcessName?: string;
            Offset?: number;
            Args?: string;
            Kill?: boolean;
            PPid?: number;
            ProcessArgs?: string[];
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new SpawnDllReq({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.ProcessName != null) {
                message.ProcessName = data.ProcessName;
            }
            if (data.Offset != null) {
                message.Offset = data.Offset;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.Kill != null) {
                message.Kill = data.Kill;
            }
            if (data.PPid != null) {
                message.PPid = data.PPid;
            }
            if (data.ProcessArgs != null) {
                message.ProcessArgs = data.ProcessArgs;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                ProcessName?: string;
                Offset?: number;
                Args?: string;
                Kill?: boolean;
                PPid?: number;
                ProcessArgs?: string[];
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.ProcessName != null) {
                data.ProcessName = this.ProcessName;
            }
            if (this.Offset != null) {
                data.Offset = this.Offset;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.Kill != null) {
                data.Kill = this.Kill;
            }
            if (this.PPid != null) {
                data.PPid = this.PPid;
            }
            if (this.ProcessArgs != null) {
                data.ProcessArgs = this.ProcessArgs;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (typeof this.ProcessName === "string" && this.ProcessName.length)
                writer.writeString(2, this.ProcessName);
            if (this.Offset !== undefined)
                writer.writeUint32(3, this.Offset);
            if (typeof this.Args === "string" && this.Args.length)
                writer.writeString(4, this.Args);
            if (this.Kill !== undefined)
                writer.writeBool(5, this.Kill);
            if (this.PPid !== undefined)
                writer.writeUint32(10, this.PPid);
            if (this.ProcessArgs !== undefined)
                writer.writeRepeatedString(11, this.ProcessArgs);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpawnDllReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpawnDllReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.ProcessName = reader.readString();
                        break;
                    case 3:
                        message.Offset = reader.readUint32();
                        break;
                    case 4:
                        message.Args = reader.readString();
                        break;
                    case 5:
                        message.Kill = reader.readBool();
                        break;
                    case 10:
                        message.PPid = reader.readUint32();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpawnDllReq {
            return SpawnDllReq.deserialize(bytes);
        }
    }
    export class SpawnDll extends pb_1.Message {
        constructor(data?: any[] | {
            Result?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Result" in data && data.Result != undefined) {
                    this.Result = data.Result;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Result() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Result?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new SpawnDll({});
            if (data.Result != null) {
                message.Result = data.Result;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Result?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Result != null) {
                data.Result = this.Result;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Result === "string" && this.Result.length)
                writer.writeString(1, this.Result);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpawnDll {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpawnDll();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Result = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpawnDll {
            return SpawnDll.deserialize(bytes);
        }
    }
    export class NetstatReq extends pb_1.Message {
        constructor(data?: any[] | {
            TCP?: boolean;
            UDP?: boolean;
            IP4?: boolean;
            IP6?: boolean;
            Listening?: boolean;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("TCP" in data && data.TCP != undefined) {
                    this.TCP = data.TCP;
                }
                if ("UDP" in data && data.UDP != undefined) {
                    this.UDP = data.UDP;
                }
                if ("IP4" in data && data.IP4 != undefined) {
                    this.IP4 = data.IP4;
                }
                if ("IP6" in data && data.IP6 != undefined) {
                    this.IP6 = data.IP6;
                }
                if ("Listening" in data && data.Listening != undefined) {
                    this.Listening = data.Listening;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get TCP() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set TCP(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get UDP() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set UDP(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get IP4() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set IP4(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get IP6() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set IP6(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get Listening() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set Listening(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            TCP?: boolean;
            UDP?: boolean;
            IP4?: boolean;
            IP6?: boolean;
            Listening?: boolean;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new NetstatReq({});
            if (data.TCP != null) {
                message.TCP = data.TCP;
            }
            if (data.UDP != null) {
                message.UDP = data.UDP;
            }
            if (data.IP4 != null) {
                message.IP4 = data.IP4;
            }
            if (data.IP6 != null) {
                message.IP6 = data.IP6;
            }
            if (data.Listening != null) {
                message.Listening = data.Listening;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                TCP?: boolean;
                UDP?: boolean;
                IP4?: boolean;
                IP6?: boolean;
                Listening?: boolean;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.TCP != null) {
                data.TCP = this.TCP;
            }
            if (this.UDP != null) {
                data.UDP = this.UDP;
            }
            if (this.IP4 != null) {
                data.IP4 = this.IP4;
            }
            if (this.IP6 != null) {
                data.IP6 = this.IP6;
            }
            if (this.Listening != null) {
                data.Listening = this.Listening;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.TCP !== undefined)
                writer.writeBool(1, this.TCP);
            if (this.UDP !== undefined)
                writer.writeBool(2, this.UDP);
            if (this.IP4 !== undefined)
                writer.writeBool(3, this.IP4);
            if (this.IP6 !== undefined)
                writer.writeBool(5, this.IP6);
            if (this.Listening !== undefined)
                writer.writeBool(6, this.Listening);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetstatReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetstatReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.TCP = reader.readBool();
                        break;
                    case 2:
                        message.UDP = reader.readBool();
                        break;
                    case 3:
                        message.IP4 = reader.readBool();
                        break;
                    case 5:
                        message.IP6 = reader.readBool();
                        break;
                    case 6:
                        message.Listening = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetstatReq {
            return NetstatReq.deserialize(bytes);
        }
    }
    export class SockTabEntry extends pb_1.Message {
        constructor(data?: any[] | {
            LocalAddr?: SockTabEntry.SockAddr;
            RemoteAddr?: SockTabEntry.SockAddr;
            SkState?: string;
            UID?: number;
            Process?: dependency_1.commonpb.Process;
            Protocol?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("LocalAddr" in data && data.LocalAddr != undefined) {
                    this.LocalAddr = data.LocalAddr;
                }
                if ("RemoteAddr" in data && data.RemoteAddr != undefined) {
                    this.RemoteAddr = data.RemoteAddr;
                }
                if ("SkState" in data && data.SkState != undefined) {
                    this.SkState = data.SkState;
                }
                if ("UID" in data && data.UID != undefined) {
                    this.UID = data.UID;
                }
                if ("Process" in data && data.Process != undefined) {
                    this.Process = data.Process;
                }
                if ("Protocol" in data && data.Protocol != undefined) {
                    this.Protocol = data.Protocol;
                }
            }
        }
        get LocalAddr() {
            return pb_1.Message.getWrapperField(this, SockTabEntry.SockAddr, 1) as SockTabEntry.SockAddr;
        }
        set LocalAddr(value: SockTabEntry.SockAddr) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get RemoteAddr() {
            return pb_1.Message.getWrapperField(this, SockTabEntry.SockAddr, 2) as SockTabEntry.SockAddr;
        }
        set RemoteAddr(value: SockTabEntry.SockAddr) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get SkState() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set SkState(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get UID() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set UID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Process() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Process, 5) as dependency_1.commonpb.Process;
        }
        set Process(value: dependency_1.commonpb.Process) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get Protocol() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set Protocol(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            LocalAddr?: ReturnType<typeof SockTabEntry.SockAddr.prototype.toObject>;
            RemoteAddr?: ReturnType<typeof SockTabEntry.SockAddr.prototype.toObject>;
            SkState?: string;
            UID?: number;
            Process?: ReturnType<typeof dependency_1.commonpb.Process.prototype.toObject>;
            Protocol?: string;
        }) {
            const message = new SockTabEntry({});
            if (data.LocalAddr != null) {
                message.LocalAddr = SockTabEntry.SockAddr.fromObject(data.LocalAddr);
            }
            if (data.RemoteAddr != null) {
                message.RemoteAddr = SockTabEntry.SockAddr.fromObject(data.RemoteAddr);
            }
            if (data.SkState != null) {
                message.SkState = data.SkState;
            }
            if (data.UID != null) {
                message.UID = data.UID;
            }
            if (data.Process != null) {
                message.Process = dependency_1.commonpb.Process.fromObject(data.Process);
            }
            if (data.Protocol != null) {
                message.Protocol = data.Protocol;
            }
            return message;
        }
        toObject() {
            const data: {
                LocalAddr?: ReturnType<typeof SockTabEntry.SockAddr.prototype.toObject>;
                RemoteAddr?: ReturnType<typeof SockTabEntry.SockAddr.prototype.toObject>;
                SkState?: string;
                UID?: number;
                Process?: ReturnType<typeof dependency_1.commonpb.Process.prototype.toObject>;
                Protocol?: string;
            } = {};
            if (this.LocalAddr != null) {
                data.LocalAddr = this.LocalAddr.toObject();
            }
            if (this.RemoteAddr != null) {
                data.RemoteAddr = this.RemoteAddr.toObject();
            }
            if (this.SkState != null) {
                data.SkState = this.SkState;
            }
            if (this.UID != null) {
                data.UID = this.UID;
            }
            if (this.Process != null) {
                data.Process = this.Process.toObject();
            }
            if (this.Protocol != null) {
                data.Protocol = this.Protocol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.LocalAddr !== undefined)
                writer.writeMessage(1, this.LocalAddr, () => this.LocalAddr.serialize(writer));
            if (this.RemoteAddr !== undefined)
                writer.writeMessage(2, this.RemoteAddr, () => this.RemoteAddr.serialize(writer));
            if (typeof this.SkState === "string" && this.SkState.length)
                writer.writeString(3, this.SkState);
            if (this.UID !== undefined)
                writer.writeUint32(4, this.UID);
            if (this.Process !== undefined)
                writer.writeMessage(5, this.Process, () => this.Process.serialize(writer));
            if (typeof this.Protocol === "string" && this.Protocol.length)
                writer.writeString(6, this.Protocol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SockTabEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SockTabEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.LocalAddr, () => message.LocalAddr = SockTabEntry.SockAddr.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.RemoteAddr, () => message.RemoteAddr = SockTabEntry.SockAddr.deserialize(reader));
                        break;
                    case 3:
                        message.SkState = reader.readString();
                        break;
                    case 4:
                        message.UID = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.Process, () => message.Process = dependency_1.commonpb.Process.deserialize(reader));
                        break;
                    case 6:
                        message.Protocol = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SockTabEntry {
            return SockTabEntry.deserialize(bytes);
        }
    }
    export namespace SockTabEntry {
        export class SockAddr extends pb_1.Message {
            constructor(data?: any[] | {
                Ip?: string;
                Port?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("Ip" in data && data.Ip != undefined) {
                        this.Ip = data.Ip;
                    }
                    if ("Port" in data && data.Port != undefined) {
                        this.Port = data.Port;
                    }
                }
            }
            get Ip() {
                return pb_1.Message.getField(this, 1) as string;
            }
            set Ip(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get Port() {
                return pb_1.Message.getField(this, 2) as number;
            }
            set Port(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                Ip?: string;
                Port?: number;
            }) {
                const message = new SockAddr({});
                if (data.Ip != null) {
                    message.Ip = data.Ip;
                }
                if (data.Port != null) {
                    message.Port = data.Port;
                }
                return message;
            }
            toObject() {
                const data: {
                    Ip?: string;
                    Port?: number;
                } = {};
                if (this.Ip != null) {
                    data.Ip = this.Ip;
                }
                if (this.Port != null) {
                    data.Port = this.Port;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.Ip === "string" && this.Ip.length)
                    writer.writeString(1, this.Ip);
                if (this.Port !== undefined)
                    writer.writeUint32(2, this.Port);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SockAddr {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SockAddr();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.Ip = reader.readString();
                            break;
                        case 2:
                            message.Port = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SockAddr {
                return SockAddr.deserialize(bytes);
            }
        }
    }
    export class Netstat extends pb_1.Message {
        constructor(data?: any[] | {
            Entries?: SockTabEntry[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entries" in data && data.Entries != undefined) {
                    this.Entries = data.Entries;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Entries() {
            return pb_1.Message.getRepeatedWrapperField(this, SockTabEntry, 1) as SockTabEntry[];
        }
        set Entries(value: SockTabEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Entries?: ReturnType<typeof SockTabEntry.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Netstat({});
            if (data.Entries != null) {
                message.Entries = data.Entries.map(item => SockTabEntry.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Entries?: ReturnType<typeof SockTabEntry.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Entries != null) {
                data.Entries = this.Entries.map((item: SockTabEntry) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Entries !== undefined)
                writer.writeRepeatedMessage(1, this.Entries, (item: SockTabEntry) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Netstat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Netstat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Entries, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SockTabEntry.deserialize(reader), SockTabEntry));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Netstat {
            return Netstat.deserialize(bytes);
        }
    }
    export class EnvReq extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Name?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new EnvReq({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnvReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnvReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnvReq {
            return EnvReq.deserialize(bytes);
        }
    }
    export class EnvInfo extends pb_1.Message {
        constructor(data?: any[] | {
            Variables?: dependency_1.commonpb.EnvVar[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Variables" in data && data.Variables != undefined) {
                    this.Variables = data.Variables;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Variables() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.commonpb.EnvVar, 1) as dependency_1.commonpb.EnvVar[];
        }
        set Variables(value: dependency_1.commonpb.EnvVar[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Variables?: ReturnType<typeof dependency_1.commonpb.EnvVar.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new EnvInfo({});
            if (data.Variables != null) {
                message.Variables = data.Variables.map(item => dependency_1.commonpb.EnvVar.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Variables?: ReturnType<typeof dependency_1.commonpb.EnvVar.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Variables != null) {
                data.Variables = this.Variables.map((item: dependency_1.commonpb.EnvVar) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Variables !== undefined)
                writer.writeRepeatedMessage(1, this.Variables, (item: dependency_1.commonpb.EnvVar) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnvInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnvInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Variables, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.commonpb.EnvVar.deserialize(reader), dependency_1.commonpb.EnvVar));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnvInfo {
            return EnvInfo.deserialize(bytes);
        }
    }
    export class SetEnvReq extends pb_1.Message {
        constructor(data?: any[] | {
            Variable?: dependency_1.commonpb.EnvVar;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Variable" in data && data.Variable != undefined) {
                    this.Variable = data.Variable;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Variable() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.EnvVar, 1) as dependency_1.commonpb.EnvVar;
        }
        set Variable(value: dependency_1.commonpb.EnvVar) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Variable?: ReturnType<typeof dependency_1.commonpb.EnvVar.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new SetEnvReq({});
            if (data.Variable != null) {
                message.Variable = dependency_1.commonpb.EnvVar.fromObject(data.Variable);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Variable?: ReturnType<typeof dependency_1.commonpb.EnvVar.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Variable != null) {
                data.Variable = this.Variable.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Variable !== undefined)
                writer.writeMessage(1, this.Variable, () => this.Variable.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEnvReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEnvReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Variable, () => message.Variable = dependency_1.commonpb.EnvVar.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEnvReq {
            return SetEnvReq.deserialize(bytes);
        }
    }
    export class SetEnv extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new SetEnv({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEnv {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEnv();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEnv {
            return SetEnv.deserialize(bytes);
        }
    }
    export class UnsetEnvReq extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Name?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new UnsetEnvReq({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnsetEnvReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnsetEnvReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnsetEnvReq {
            return UnsetEnvReq.deserialize(bytes);
        }
    }
    export class UnsetEnv extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new UnsetEnv({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnsetEnv {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnsetEnv();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnsetEnv {
            return UnsetEnv.deserialize(bytes);
        }
    }
    export class DNSSessionInit extends pb_1.Message {
        constructor(data?: any[] | {
            Key?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
            }
        }
        get Key() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Key?: Uint8Array;
        }) {
            const message = new DNSSessionInit({});
            if (data.Key != null) {
                message.Key = data.Key;
            }
            return message;
        }
        toObject() {
            const data: {
                Key?: Uint8Array;
            } = {};
            if (this.Key != null) {
                data.Key = this.Key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Key !== undefined)
                writer.writeBytes(1, this.Key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DNSSessionInit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DNSSessionInit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DNSSessionInit {
            return DNSSessionInit.deserialize(bytes);
        }
    }
    export class DNSPoll extends pb_1.Message {
        constructor(data?: any[] | {
            blocks?: DNSBlockHeader[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blocks" in data && data.blocks != undefined) {
                    this.blocks = data.blocks;
                }
            }
        }
        get blocks() {
            return pb_1.Message.getRepeatedWrapperField(this, DNSBlockHeader, 1) as DNSBlockHeader[];
        }
        set blocks(value: DNSBlockHeader[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            blocks?: ReturnType<typeof DNSBlockHeader.prototype.toObject>[];
        }) {
            const message = new DNSPoll({});
            if (data.blocks != null) {
                message.blocks = data.blocks.map(item => DNSBlockHeader.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                blocks?: ReturnType<typeof DNSBlockHeader.prototype.toObject>[];
            } = {};
            if (this.blocks != null) {
                data.blocks = this.blocks.map((item: DNSBlockHeader) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blocks !== undefined)
                writer.writeRepeatedMessage(1, this.blocks, (item: DNSBlockHeader) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DNSPoll {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DNSPoll();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blocks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DNSBlockHeader.deserialize(reader), DNSBlockHeader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DNSPoll {
            return DNSPoll.deserialize(bytes);
        }
    }
    export class DNSBlockHeader extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: string;
            Size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Size() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ID?: string;
            Size?: number;
        }) {
            const message = new DNSBlockHeader({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: string;
                Size?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ID === "string" && this.ID.length)
                writer.writeString(1, this.ID);
            if (this.Size !== undefined)
                writer.writeUint32(2, this.Size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DNSBlockHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DNSBlockHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readString();
                        break;
                    case 2:
                        message.Size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DNSBlockHeader {
            return DNSBlockHeader.deserialize(bytes);
        }
    }
    export class HTTPSessionInit extends pb_1.Message {
        constructor(data?: any[] | {
            Key?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
            }
        }
        get Key() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Key?: Uint8Array;
        }) {
            const message = new HTTPSessionInit({});
            if (data.Key != null) {
                message.Key = data.Key;
            }
            return message;
        }
        toObject() {
            const data: {
                Key?: Uint8Array;
            } = {};
            if (this.Key != null) {
                data.Key = this.Key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Key !== undefined)
                writer.writeBytes(1, this.Key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSessionInit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSessionInit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSessionInit {
            return HTTPSessionInit.deserialize(bytes);
        }
    }
    export class ScreenshotReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ScreenshotReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScreenshotReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScreenshotReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScreenshotReq {
            return ScreenshotReq.deserialize(bytes);
        }
    }
    export class Screenshot extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Screenshot({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Screenshot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Screenshot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Screenshot {
            return Screenshot.deserialize(bytes);
        }
    }
    export class StartServiceReq extends pb_1.Message {
        constructor(data?: any[] | {
            ServiceName?: string;
            ServiceDescription?: string;
            BinPath?: string;
            Hostname?: string;
            Arguments?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ServiceName" in data && data.ServiceName != undefined) {
                    this.ServiceName = data.ServiceName;
                }
                if ("ServiceDescription" in data && data.ServiceDescription != undefined) {
                    this.ServiceDescription = data.ServiceDescription;
                }
                if ("BinPath" in data && data.BinPath != undefined) {
                    this.BinPath = data.BinPath;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Arguments" in data && data.Arguments != undefined) {
                    this.Arguments = data.Arguments;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ServiceName() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ServiceName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ServiceDescription() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ServiceDescription(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get BinPath() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set BinPath(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Arguments() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Arguments(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ServiceName?: string;
            ServiceDescription?: string;
            BinPath?: string;
            Hostname?: string;
            Arguments?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new StartServiceReq({});
            if (data.ServiceName != null) {
                message.ServiceName = data.ServiceName;
            }
            if (data.ServiceDescription != null) {
                message.ServiceDescription = data.ServiceDescription;
            }
            if (data.BinPath != null) {
                message.BinPath = data.BinPath;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Arguments != null) {
                message.Arguments = data.Arguments;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ServiceName?: string;
                ServiceDescription?: string;
                BinPath?: string;
                Hostname?: string;
                Arguments?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ServiceName != null) {
                data.ServiceName = this.ServiceName;
            }
            if (this.ServiceDescription != null) {
                data.ServiceDescription = this.ServiceDescription;
            }
            if (this.BinPath != null) {
                data.BinPath = this.BinPath;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Arguments != null) {
                data.Arguments = this.Arguments;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ServiceName === "string" && this.ServiceName.length)
                writer.writeString(1, this.ServiceName);
            if (typeof this.ServiceDescription === "string" && this.ServiceDescription.length)
                writer.writeString(2, this.ServiceDescription);
            if (typeof this.BinPath === "string" && this.BinPath.length)
                writer.writeString(3, this.BinPath);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (typeof this.Arguments === "string" && this.Arguments.length)
                writer.writeString(5, this.Arguments);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartServiceReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartServiceReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ServiceName = reader.readString();
                        break;
                    case 2:
                        message.ServiceDescription = reader.readString();
                        break;
                    case 3:
                        message.BinPath = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 5:
                        message.Arguments = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartServiceReq {
            return StartServiceReq.deserialize(bytes);
        }
    }
    export class ServiceInfo extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new ServiceInfo({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceInfo {
            return ServiceInfo.deserialize(bytes);
        }
    }
    export class ServiceInfoReq extends pb_1.Message {
        constructor(data?: any[] | {
            ServiceName?: string;
            Hostname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ServiceName" in data && data.ServiceName != undefined) {
                    this.ServiceName = data.ServiceName;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
            }
        }
        get ServiceName() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set ServiceName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ServiceName?: string;
            Hostname?: string;
        }) {
            const message = new ServiceInfoReq({});
            if (data.ServiceName != null) {
                message.ServiceName = data.ServiceName;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            return message;
        }
        toObject() {
            const data: {
                ServiceName?: string;
                Hostname?: string;
            } = {};
            if (this.ServiceName != null) {
                data.ServiceName = this.ServiceName;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.ServiceName === "string" && this.ServiceName.length)
                writer.writeString(1, this.ServiceName);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(2, this.Hostname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ServiceName = reader.readString();
                        break;
                    case 2:
                        message.Hostname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceInfoReq {
            return ServiceInfoReq.deserialize(bytes);
        }
    }
    export class StopServiceReq extends pb_1.Message {
        constructor(data?: any[] | {
            ServiceInfo?: ServiceInfoReq;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ServiceInfo" in data && data.ServiceInfo != undefined) {
                    this.ServiceInfo = data.ServiceInfo;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ServiceInfo() {
            return pb_1.Message.getWrapperField(this, ServiceInfoReq, 1) as ServiceInfoReq;
        }
        set ServiceInfo(value: ServiceInfoReq) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ServiceInfo?: ReturnType<typeof ServiceInfoReq.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new StopServiceReq({});
            if (data.ServiceInfo != null) {
                message.ServiceInfo = ServiceInfoReq.fromObject(data.ServiceInfo);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ServiceInfo?: ReturnType<typeof ServiceInfoReq.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ServiceInfo != null) {
                data.ServiceInfo = this.ServiceInfo.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ServiceInfo !== undefined)
                writer.writeMessage(1, this.ServiceInfo, () => this.ServiceInfo.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopServiceReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopServiceReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ServiceInfo, () => message.ServiceInfo = ServiceInfoReq.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopServiceReq {
            return StopServiceReq.deserialize(bytes);
        }
    }
    export class RemoveServiceReq extends pb_1.Message {
        constructor(data?: any[] | {
            ServiceInfo?: ServiceInfoReq;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ServiceInfo" in data && data.ServiceInfo != undefined) {
                    this.ServiceInfo = data.ServiceInfo;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ServiceInfo() {
            return pb_1.Message.getWrapperField(this, ServiceInfoReq, 1) as ServiceInfoReq;
        }
        set ServiceInfo(value: ServiceInfoReq) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ServiceInfo?: ReturnType<typeof ServiceInfoReq.prototype.toObject>;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RemoveServiceReq({});
            if (data.ServiceInfo != null) {
                message.ServiceInfo = ServiceInfoReq.fromObject(data.ServiceInfo);
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ServiceInfo?: ReturnType<typeof ServiceInfoReq.prototype.toObject>;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ServiceInfo != null) {
                data.ServiceInfo = this.ServiceInfo.toObject();
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ServiceInfo !== undefined)
                writer.writeMessage(1, this.ServiceInfo, () => this.ServiceInfo.serialize(writer));
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveServiceReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveServiceReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ServiceInfo, () => message.ServiceInfo = ServiceInfoReq.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveServiceReq {
            return RemoveServiceReq.deserialize(bytes);
        }
    }
    export class BackdoorReq extends pb_1.Message {
        constructor(data?: any[] | {
            FilePath?: string;
            ProfileName?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("FilePath" in data && data.FilePath != undefined) {
                    this.FilePath = data.FilePath;
                }
                if ("ProfileName" in data && data.ProfileName != undefined) {
                    this.ProfileName = data.ProfileName;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get FilePath() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set FilePath(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ProfileName() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProfileName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            FilePath?: string;
            ProfileName?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new BackdoorReq({});
            if (data.FilePath != null) {
                message.FilePath = data.FilePath;
            }
            if (data.ProfileName != null) {
                message.ProfileName = data.ProfileName;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                FilePath?: string;
                ProfileName?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.FilePath != null) {
                data.FilePath = this.FilePath;
            }
            if (this.ProfileName != null) {
                data.ProfileName = this.ProfileName;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.FilePath === "string" && this.FilePath.length)
                writer.writeString(1, this.FilePath);
            if (typeof this.ProfileName === "string" && this.ProfileName.length)
                writer.writeString(2, this.ProfileName);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackdoorReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackdoorReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.FilePath = reader.readString();
                        break;
                    case 2:
                        message.ProfileName = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackdoorReq {
            return BackdoorReq.deserialize(bytes);
        }
    }
    export class Backdoor extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Backdoor({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Backdoor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Backdoor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Backdoor {
            return Backdoor.deserialize(bytes);
        }
    }
    export class RegistryReadReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Key() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistryReadReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Key != null) {
                message.Key = data.Key;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Key?: string;
                Hostname?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Key != null) {
                data.Key = this.Key;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Key === "string" && this.Key.length)
                writer.writeString(3, this.Key);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryReadReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryReadReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 3:
                        message.Key = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryReadReq {
            return RegistryReadReq.deserialize(bytes);
        }
    }
    export class RegistryRead extends pb_1.Message {
        constructor(data?: any[] | {
            Value?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Value" in data && data.Value != undefined) {
                    this.Value = data.Value;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Value() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Value?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistryRead({});
            if (data.Value != null) {
                message.Value = data.Value;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Value?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Value != null) {
                data.Value = this.Value;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Value === "string" && this.Value.length)
                writer.writeString(1, this.Value);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryRead {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryRead();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Value = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryRead {
            return RegistryRead.deserialize(bytes);
        }
    }
    export class RegistryWriteReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            StringValue?: string;
            ByteValue?: Uint8Array;
            DWordValue?: number;
            QWordValue?: number;
            Type?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("StringValue" in data && data.StringValue != undefined) {
                    this.StringValue = data.StringValue;
                }
                if ("ByteValue" in data && data.ByteValue != undefined) {
                    this.ByteValue = data.ByteValue;
                }
                if ("DWordValue" in data && data.DWordValue != undefined) {
                    this.DWordValue = data.DWordValue;
                }
                if ("QWordValue" in data && data.QWordValue != undefined) {
                    this.QWordValue = data.QWordValue;
                }
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Key() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get StringValue() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set StringValue(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ByteValue() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set ByteValue(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get DWordValue() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set DWordValue(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get QWordValue() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set QWordValue(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get Type() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set Type(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            StringValue?: string;
            ByteValue?: Uint8Array;
            DWordValue?: number;
            QWordValue?: number;
            Type?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistryWriteReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Key != null) {
                message.Key = data.Key;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.StringValue != null) {
                message.StringValue = data.StringValue;
            }
            if (data.ByteValue != null) {
                message.ByteValue = data.ByteValue;
            }
            if (data.DWordValue != null) {
                message.DWordValue = data.DWordValue;
            }
            if (data.QWordValue != null) {
                message.QWordValue = data.QWordValue;
            }
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Key?: string;
                Hostname?: string;
                StringValue?: string;
                ByteValue?: Uint8Array;
                DWordValue?: number;
                QWordValue?: number;
                Type?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Key != null) {
                data.Key = this.Key;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.StringValue != null) {
                data.StringValue = this.StringValue;
            }
            if (this.ByteValue != null) {
                data.ByteValue = this.ByteValue;
            }
            if (this.DWordValue != null) {
                data.DWordValue = this.DWordValue;
            }
            if (this.QWordValue != null) {
                data.QWordValue = this.QWordValue;
            }
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Key === "string" && this.Key.length)
                writer.writeString(3, this.Key);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (typeof this.StringValue === "string" && this.StringValue.length)
                writer.writeString(5, this.StringValue);
            if (this.ByteValue !== undefined)
                writer.writeBytes(6, this.ByteValue);
            if (this.DWordValue !== undefined)
                writer.writeUint32(7, this.DWordValue);
            if (this.QWordValue !== undefined)
                writer.writeUint64(8, this.QWordValue);
            if (this.Type !== undefined)
                writer.writeUint32(10, this.Type);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryWriteReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryWriteReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 3:
                        message.Key = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 5:
                        message.StringValue = reader.readString();
                        break;
                    case 6:
                        message.ByteValue = reader.readBytes();
                        break;
                    case 7:
                        message.DWordValue = reader.readUint32();
                        break;
                    case 8:
                        message.QWordValue = reader.readUint64();
                        break;
                    case 10:
                        message.Type = reader.readUint32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryWriteReq {
            return RegistryWriteReq.deserialize(bytes);
        }
    }
    export class RegistryWrite extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistryWrite({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryWrite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryWrite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryWrite {
            return RegistryWrite.deserialize(bytes);
        }
    }
    export class RegistryCreateKeyReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Key() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistryCreateKeyReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Key != null) {
                message.Key = data.Key;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Key?: string;
                Hostname?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Key != null) {
                data.Key = this.Key;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Key === "string" && this.Key.length)
                writer.writeString(3, this.Key);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryCreateKeyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryCreateKeyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 3:
                        message.Key = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryCreateKeyReq {
            return RegistryCreateKeyReq.deserialize(bytes);
        }
    }
    export class RegistryCreateKey extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistryCreateKey({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryCreateKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryCreateKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryCreateKey {
            return RegistryCreateKey.deserialize(bytes);
        }
    }
    export class RegistryDeleteKeyReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Key() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Key?: string;
            Hostname?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistryDeleteKeyReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Key != null) {
                message.Key = data.Key;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Key?: string;
                Hostname?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Key != null) {
                data.Key = this.Key;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Key === "string" && this.Key.length)
                writer.writeString(3, this.Key);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryDeleteKeyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryDeleteKeyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 3:
                        message.Key = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryDeleteKeyReq {
            return RegistryDeleteKeyReq.deserialize(bytes);
        }
    }
    export class RegistryDeleteKey extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistryDeleteKey({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryDeleteKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryDeleteKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryDeleteKey {
            return RegistryDeleteKey.deserialize(bytes);
        }
    }
    export class RegistrySubKeyListReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Hostname?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Hostname?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistrySubKeyListReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Hostname?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistrySubKeyListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistrySubKeyListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistrySubKeyListReq {
            return RegistrySubKeyListReq.deserialize(bytes);
        }
    }
    export class RegistrySubKeyList extends pb_1.Message {
        constructor(data?: any[] | {
            Subkeys?: string[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Subkeys" in data && data.Subkeys != undefined) {
                    this.Subkeys = data.Subkeys;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Subkeys() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set Subkeys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Subkeys?: string[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistrySubKeyList({});
            if (data.Subkeys != null) {
                message.Subkeys = data.Subkeys;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Subkeys?: string[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Subkeys != null) {
                data.Subkeys = this.Subkeys;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Subkeys !== undefined)
                writer.writeRepeatedString(1, this.Subkeys);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistrySubKeyList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistrySubKeyList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistrySubKeyList {
            return RegistrySubKeyList.deserialize(bytes);
        }
    }
    export class RegistryListValuesReq extends pb_1.Message {
        constructor(data?: any[] | {
            Hive?: string;
            Path?: string;
            Hostname?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hive" in data && data.Hive != undefined) {
                    this.Hive = data.Hive;
                }
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Hive() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Hive(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Path() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Hive?: string;
            Path?: string;
            Hostname?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegistryListValuesReq({});
            if (data.Hive != null) {
                message.Hive = data.Hive;
            }
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Hive?: string;
                Path?: string;
                Hostname?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Hive != null) {
                data.Hive = this.Hive;
            }
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Hive === "string" && this.Hive.length)
                writer.writeString(1, this.Hive);
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(2, this.Path);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(4, this.Hostname);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryListValuesReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryListValuesReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hive = reader.readString();
                        break;
                    case 2:
                        message.Path = reader.readString();
                        break;
                    case 4:
                        message.Hostname = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryListValuesReq {
            return RegistryListValuesReq.deserialize(bytes);
        }
    }
    export class RegistryValuesList extends pb_1.Message {
        constructor(data?: any[] | {
            ValueNames?: string[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ValueNames" in data && data.ValueNames != undefined) {
                    this.ValueNames = data.ValueNames;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get ValueNames() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set ValueNames(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ValueNames?: string[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegistryValuesList({});
            if (data.ValueNames != null) {
                message.ValueNames = data.ValueNames;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                ValueNames?: string[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.ValueNames != null) {
                data.ValueNames = this.ValueNames;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ValueNames !== undefined)
                writer.writeRepeatedString(1, this.ValueNames);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistryValuesList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistryValuesList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistryValuesList {
            return RegistryValuesList.deserialize(bytes);
        }
    }
    export class Tunnel extends pb_1.Message {
        constructor(data?: any[] | {
            TunnelID?: string;
            SessionID?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("SessionID" in data && data.SessionID != undefined) {
                    this.SessionID = data.SessionID;
                }
            }
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get SessionID() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set SessionID(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            TunnelID?: string;
            SessionID?: string;
        }) {
            const message = new Tunnel({});
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.SessionID != null) {
                message.SessionID = data.SessionID;
            }
            return message;
        }
        toObject() {
            const data: {
                TunnelID?: string;
                SessionID?: string;
            } = {};
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.SessionID != null) {
                data.SessionID = this.SessionID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (typeof this.SessionID === "string" && this.SessionID.length)
                writer.writeString(9, this.SessionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        message.SessionID = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tunnel {
            return Tunnel.deserialize(bytes);
        }
    }
    export class TunnelData extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            Closed?: boolean;
            Sequence?: number;
            Ack?: number;
            Resend?: boolean;
            TunnelID?: string;
            SessionID?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Closed" in data && data.Closed != undefined) {
                    this.Closed = data.Closed;
                }
                if ("Sequence" in data && data.Sequence != undefined) {
                    this.Sequence = data.Sequence;
                }
                if ("Ack" in data && data.Ack != undefined) {
                    this.Ack = data.Ack;
                }
                if ("Resend" in data && data.Resend != undefined) {
                    this.Resend = data.Resend;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("SessionID" in data && data.SessionID != undefined) {
                    this.SessionID = data.SessionID;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Closed() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set Closed(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Sequence() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Ack() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set Ack(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Resend() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set Resend(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get SessionID() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set SessionID(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            Closed?: boolean;
            Sequence?: number;
            Ack?: number;
            Resend?: boolean;
            TunnelID?: string;
            SessionID?: string;
        }) {
            const message = new TunnelData({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Closed != null) {
                message.Closed = data.Closed;
            }
            if (data.Sequence != null) {
                message.Sequence = data.Sequence;
            }
            if (data.Ack != null) {
                message.Ack = data.Ack;
            }
            if (data.Resend != null) {
                message.Resend = data.Resend;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.SessionID != null) {
                message.SessionID = data.SessionID;
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                Closed?: boolean;
                Sequence?: number;
                Ack?: number;
                Resend?: boolean;
                TunnelID?: string;
                SessionID?: string;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Closed != null) {
                data.Closed = this.Closed;
            }
            if (this.Sequence != null) {
                data.Sequence = this.Sequence;
            }
            if (this.Ack != null) {
                data.Ack = this.Ack;
            }
            if (this.Resend != null) {
                data.Resend = this.Resend;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.SessionID != null) {
                data.SessionID = this.SessionID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (this.Closed !== undefined)
                writer.writeBool(2, this.Closed);
            if (this.Sequence !== undefined)
                writer.writeUint64(3, this.Sequence);
            if (this.Ack !== undefined)
                writer.writeUint64(4, this.Ack);
            if (this.Resend !== undefined)
                writer.writeBool(5, this.Resend);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (typeof this.SessionID === "string" && this.SessionID.length)
                writer.writeString(9, this.SessionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TunnelData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TunnelData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.Closed = reader.readBool();
                        break;
                    case 3:
                        message.Sequence = reader.readUint64();
                        break;
                    case 4:
                        message.Ack = reader.readUint64();
                        break;
                    case 5:
                        message.Resend = reader.readBool();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        message.SessionID = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TunnelData {
            return TunnelData.deserialize(bytes);
        }
    }
    export class ShellReq extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            EnablePTY?: boolean;
            Pid?: number;
            TunnelID?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("EnablePTY" in data && data.EnablePTY != undefined) {
                    this.EnablePTY = data.EnablePTY;
                }
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get EnablePTY() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set EnablePTY(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Pid() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            EnablePTY?: boolean;
            Pid?: number;
            TunnelID?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ShellReq({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.EnablePTY != null) {
                message.EnablePTY = data.EnablePTY;
            }
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                EnablePTY?: boolean;
                Pid?: number;
                TunnelID?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.EnablePTY != null) {
                data.EnablePTY = this.EnablePTY;
            }
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.EnablePTY !== undefined)
                writer.writeBool(2, this.EnablePTY);
            if (this.Pid !== undefined)
                writer.writeUint32(3, this.Pid);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.EnablePTY = reader.readBool();
                        break;
                    case 3:
                        message.Pid = reader.readUint32();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellReq {
            return ShellReq.deserialize(bytes);
        }
    }
    export class Shell extends pb_1.Message {
        constructor(data?: any[] | {
            Path?: string;
            EnablePTY?: boolean;
            Pid?: number;
            TunnelID?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Path" in data && data.Path != undefined) {
                    this.Path = data.Path;
                }
                if ("EnablePTY" in data && data.EnablePTY != undefined) {
                    this.EnablePTY = data.EnablePTY;
                }
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Path() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get EnablePTY() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set EnablePTY(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Pid() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Path?: string;
            EnablePTY?: boolean;
            Pid?: number;
            TunnelID?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Shell({});
            if (data.Path != null) {
                message.Path = data.Path;
            }
            if (data.EnablePTY != null) {
                message.EnablePTY = data.EnablePTY;
            }
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Path?: string;
                EnablePTY?: boolean;
                Pid?: number;
                TunnelID?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Path != null) {
                data.Path = this.Path;
            }
            if (this.EnablePTY != null) {
                data.EnablePTY = this.EnablePTY;
            }
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Path === "string" && this.Path.length)
                writer.writeString(1, this.Path);
            if (this.EnablePTY !== undefined)
                writer.writeBool(2, this.EnablePTY);
            if (this.Pid !== undefined)
                writer.writeUint32(3, this.Pid);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Shell {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Shell();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Path = reader.readString();
                        break;
                    case 2:
                        message.EnablePTY = reader.readBool();
                        break;
                    case 3:
                        message.Pid = reader.readUint32();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Shell {
            return Shell.deserialize(bytes);
        }
    }
    export class PortfwdReq extends pb_1.Message {
        constructor(data?: any[] | {
            Port?: number;
            Protocol?: number;
            Host?: string;
            TunnelID?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Port" in data && data.Port != undefined) {
                    this.Port = data.Port;
                }
                if ("Protocol" in data && data.Protocol != undefined) {
                    this.Protocol = data.Protocol;
                }
                if ("Host" in data && data.Host != undefined) {
                    this.Host = data.Host;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Port() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Protocol() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Protocol(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Host() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Host(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Port?: number;
            Protocol?: number;
            Host?: string;
            TunnelID?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PortfwdReq({});
            if (data.Port != null) {
                message.Port = data.Port;
            }
            if (data.Protocol != null) {
                message.Protocol = data.Protocol;
            }
            if (data.Host != null) {
                message.Host = data.Host;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Port?: number;
                Protocol?: number;
                Host?: string;
                TunnelID?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Port != null) {
                data.Port = this.Port;
            }
            if (this.Protocol != null) {
                data.Protocol = this.Protocol;
            }
            if (this.Host != null) {
                data.Host = this.Host;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Port !== undefined)
                writer.writeUint32(1, this.Port);
            if (this.Protocol !== undefined)
                writer.writeInt32(2, this.Protocol);
            if (typeof this.Host === "string" && this.Host.length)
                writer.writeString(3, this.Host);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PortfwdReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PortfwdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Port = reader.readUint32();
                        break;
                    case 2:
                        message.Protocol = reader.readInt32();
                        break;
                    case 3:
                        message.Host = reader.readString();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PortfwdReq {
            return PortfwdReq.deserialize(bytes);
        }
    }
    export class Portfwd extends pb_1.Message {
        constructor(data?: any[] | {
            Port?: number;
            Protocol?: number;
            Host?: string;
            TunnelID?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Port" in data && data.Port != undefined) {
                    this.Port = data.Port;
                }
                if ("Protocol" in data && data.Protocol != undefined) {
                    this.Protocol = data.Protocol;
                }
                if ("Host" in data && data.Host != undefined) {
                    this.Host = data.Host;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Port() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Protocol() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Protocol(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Host() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Host(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Port?: number;
            Protocol?: number;
            Host?: string;
            TunnelID?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Portfwd({});
            if (data.Port != null) {
                message.Port = data.Port;
            }
            if (data.Protocol != null) {
                message.Protocol = data.Protocol;
            }
            if (data.Host != null) {
                message.Host = data.Host;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Port?: number;
                Protocol?: number;
                Host?: string;
                TunnelID?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Port != null) {
                data.Port = this.Port;
            }
            if (this.Protocol != null) {
                data.Protocol = this.Protocol;
            }
            if (this.Host != null) {
                data.Host = this.Host;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Port !== undefined)
                writer.writeUint32(1, this.Port);
            if (this.Protocol !== undefined)
                writer.writeInt32(2, this.Protocol);
            if (typeof this.Host === "string" && this.Host.length)
                writer.writeString(3, this.Host);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Portfwd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Portfwd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Port = reader.readUint32();
                        break;
                    case 2:
                        message.Protocol = reader.readInt32();
                        break;
                    case 3:
                        message.Host = reader.readString();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Portfwd {
            return Portfwd.deserialize(bytes);
        }
    }
    export class Socks extends pb_1.Message {
        constructor(data?: any[] | {
            TunnelID?: string;
            SessionID?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("SessionID" in data && data.SessionID != undefined) {
                    this.SessionID = data.SessionID;
                }
            }
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get SessionID() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set SessionID(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            TunnelID?: string;
            SessionID?: string;
        }) {
            const message = new Socks({});
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.SessionID != null) {
                message.SessionID = data.SessionID;
            }
            return message;
        }
        toObject() {
            const data: {
                TunnelID?: string;
                SessionID?: string;
            } = {};
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.SessionID != null) {
                data.SessionID = this.SessionID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (typeof this.SessionID === "string" && this.SessionID.length)
                writer.writeString(9, this.SessionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Socks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Socks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        message.SessionID = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Socks {
            return Socks.deserialize(bytes);
        }
    }
    export class SocksData extends pb_1.Message {
        constructor(data?: any[] | {
            Data?: Uint8Array;
            CloseConn?: boolean;
            Username?: string;
            Password?: string;
            Sequence?: number;
            TunnelID?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("CloseConn" in data && data.CloseConn != undefined) {
                    this.CloseConn = data.CloseConn;
                }
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("Password" in data && data.Password != undefined) {
                    this.Password = data.Password;
                }
                if ("Sequence" in data && data.Sequence != undefined) {
                    this.Sequence = data.Sequence;
                }
                if ("TunnelID" in data && data.TunnelID != undefined) {
                    this.TunnelID = data.TunnelID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Data() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get CloseConn() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set CloseConn(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Username() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Password() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Sequence() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set Sequence(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get TunnelID() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set TunnelID(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Data?: Uint8Array;
            CloseConn?: boolean;
            Username?: string;
            Password?: string;
            Sequence?: number;
            TunnelID?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new SocksData({});
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.CloseConn != null) {
                message.CloseConn = data.CloseConn;
            }
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.Password != null) {
                message.Password = data.Password;
            }
            if (data.Sequence != null) {
                message.Sequence = data.Sequence;
            }
            if (data.TunnelID != null) {
                message.TunnelID = data.TunnelID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Data?: Uint8Array;
                CloseConn?: boolean;
                Username?: string;
                Password?: string;
                Sequence?: number;
                TunnelID?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.CloseConn != null) {
                data.CloseConn = this.CloseConn;
            }
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.Password != null) {
                data.Password = this.Password;
            }
            if (this.Sequence != null) {
                data.Sequence = this.Sequence;
            }
            if (this.TunnelID != null) {
                data.TunnelID = this.TunnelID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Data !== undefined)
                writer.writeBytes(1, this.Data);
            if (this.CloseConn !== undefined)
                writer.writeBool(2, this.CloseConn);
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(3, this.Username);
            if (typeof this.Password === "string" && this.Password.length)
                writer.writeString(4, this.Password);
            if (this.Sequence !== undefined)
                writer.writeUint64(5, this.Sequence);
            if (this.TunnelID !== undefined)
                writer.writeUint64String(8, this.TunnelID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocksData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocksData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Data = reader.readBytes();
                        break;
                    case 2:
                        message.CloseConn = reader.readBool();
                        break;
                    case 3:
                        message.Username = reader.readString();
                        break;
                    case 4:
                        message.Password = reader.readString();
                        break;
                    case 5:
                        message.Sequence = reader.readUint64();
                        break;
                    case 8:
                        message.TunnelID = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SocksData {
            return SocksData.deserialize(bytes);
        }
    }
    export class PivotStartListenerReq extends pb_1.Message {
        constructor(data?: any[] | {
            Type?: PivotType;
            BindAddress?: string;
            Options?: boolean[];
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("BindAddress" in data && data.BindAddress != undefined) {
                    this.BindAddress = data.BindAddress;
                }
                if ("Options" in data && data.Options != undefined) {
                    this.Options = data.Options;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Type() {
            return pb_1.Message.getField(this, 1) as PivotType;
        }
        set Type(value: PivotType) {
            pb_1.Message.setField(this, 1, value);
        }
        get BindAddress() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set BindAddress(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Options() {
            return pb_1.Message.getField(this, 3) as boolean[];
        }
        set Options(value: boolean[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Type?: PivotType;
            BindAddress?: string;
            Options?: boolean[];
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PivotStartListenerReq({});
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.BindAddress != null) {
                message.BindAddress = data.BindAddress;
            }
            if (data.Options != null) {
                message.Options = data.Options;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Type?: PivotType;
                BindAddress?: string;
                Options?: boolean[];
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.BindAddress != null) {
                data.BindAddress = this.BindAddress;
            }
            if (this.Options != null) {
                data.Options = this.Options;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Type !== undefined)
                writer.writeEnum(1, this.Type);
            if (typeof this.BindAddress === "string" && this.BindAddress.length)
                writer.writeString(2, this.BindAddress);
            if (this.Options !== undefined)
                writer.writePackedBool(3, this.Options);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotStartListenerReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotStartListenerReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Type = reader.readEnum();
                        break;
                    case 2:
                        message.BindAddress = reader.readString();
                        break;
                    case 3:
                        message.Options = reader.readPackedBool();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotStartListenerReq {
            return PivotStartListenerReq.deserialize(bytes);
        }
    }
    export class PivotStopListenerReq extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ID?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PivotStopListenerReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeUint32(1, this.ID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotStopListenerReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotStopListenerReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readUint32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotStopListenerReq {
            return PivotStopListenerReq.deserialize(bytes);
        }
    }
    export class PivotListener extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            Type?: PivotType;
            BindAddress?: string;
            Pivots?: NetConnPivot[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("BindAddress" in data && data.BindAddress != undefined) {
                    this.BindAddress = data.BindAddress;
                }
                if ("Pivots" in data && data.Pivots != undefined) {
                    this.Pivots = data.Pivots;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Type() {
            return pb_1.Message.getField(this, 2) as PivotType;
        }
        set Type(value: PivotType) {
            pb_1.Message.setField(this, 2, value);
        }
        get BindAddress() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set BindAddress(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Pivots() {
            return pb_1.Message.getRepeatedWrapperField(this, NetConnPivot, 4) as NetConnPivot[];
        }
        set Pivots(value: NetConnPivot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ID?: number;
            Type?: PivotType;
            BindAddress?: string;
            Pivots?: ReturnType<typeof NetConnPivot.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new PivotListener({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.BindAddress != null) {
                message.BindAddress = data.BindAddress;
            }
            if (data.Pivots != null) {
                message.Pivots = data.Pivots.map(item => NetConnPivot.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                Type?: PivotType;
                BindAddress?: string;
                Pivots?: ReturnType<typeof NetConnPivot.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.BindAddress != null) {
                data.BindAddress = this.BindAddress;
            }
            if (this.Pivots != null) {
                data.Pivots = this.Pivots.map((item: NetConnPivot) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeUint32(1, this.ID);
            if (this.Type !== undefined)
                writer.writeEnum(2, this.Type);
            if (typeof this.BindAddress === "string" && this.BindAddress.length)
                writer.writeString(3, this.BindAddress);
            if (this.Pivots !== undefined)
                writer.writeRepeatedMessage(4, this.Pivots, (item: NetConnPivot) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotListener {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotListener();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readUint32();
                        break;
                    case 2:
                        message.Type = reader.readEnum();
                        break;
                    case 3:
                        message.BindAddress = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.Pivots, () => pb_1.Message.addToRepeatedWrapperField(message, 4, NetConnPivot.deserialize(reader), NetConnPivot));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotListener {
            return PivotListener.deserialize(bytes);
        }
    }
    export class PivotHello extends pb_1.Message {
        constructor(data?: any[] | {
            PublicKey?: Uint8Array;
            PeerID?: string;
            PublicKeySignature?: string;
            SessionKey?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PublicKey" in data && data.PublicKey != undefined) {
                    this.PublicKey = data.PublicKey;
                }
                if ("PeerID" in data && data.PeerID != undefined) {
                    this.PeerID = data.PeerID;
                }
                if ("PublicKeySignature" in data && data.PublicKeySignature != undefined) {
                    this.PublicKeySignature = data.PublicKeySignature;
                }
                if ("SessionKey" in data && data.SessionKey != undefined) {
                    this.SessionKey = data.SessionKey;
                }
            }
        }
        get PublicKey() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set PublicKey(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get PeerID() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set PeerID(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get PublicKeySignature() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set PublicKeySignature(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get SessionKey() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set SessionKey(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            PublicKey?: Uint8Array;
            PeerID?: string;
            PublicKeySignature?: string;
            SessionKey?: Uint8Array;
        }) {
            const message = new PivotHello({});
            if (data.PublicKey != null) {
                message.PublicKey = data.PublicKey;
            }
            if (data.PeerID != null) {
                message.PeerID = data.PeerID;
            }
            if (data.PublicKeySignature != null) {
                message.PublicKeySignature = data.PublicKeySignature;
            }
            if (data.SessionKey != null) {
                message.SessionKey = data.SessionKey;
            }
            return message;
        }
        toObject() {
            const data: {
                PublicKey?: Uint8Array;
                PeerID?: string;
                PublicKeySignature?: string;
                SessionKey?: Uint8Array;
            } = {};
            if (this.PublicKey != null) {
                data.PublicKey = this.PublicKey;
            }
            if (this.PeerID != null) {
                data.PeerID = this.PeerID;
            }
            if (this.PublicKeySignature != null) {
                data.PublicKeySignature = this.PublicKeySignature;
            }
            if (this.SessionKey != null) {
                data.SessionKey = this.SessionKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PublicKey !== undefined)
                writer.writeBytes(1, this.PublicKey);
            if (this.PeerID !== undefined)
                writer.writeInt64String(2, this.PeerID);
            if (typeof this.PublicKeySignature === "string" && this.PublicKeySignature.length)
                writer.writeString(3, this.PublicKeySignature);
            if (this.SessionKey !== undefined)
                writer.writeBytes(4, this.SessionKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotHello {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotHello();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.PublicKey = reader.readBytes();
                        break;
                    case 2:
                        message.PeerID = reader.readInt64String();
                        break;
                    case 3:
                        message.PublicKeySignature = reader.readString();
                        break;
                    case 4:
                        message.SessionKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotHello {
            return PivotHello.deserialize(bytes);
        }
    }
    export class PivotServerKeyExchange extends pb_1.Message {
        constructor(data?: any[] | {
            OriginID?: number;
            SessionKey?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("OriginID" in data && data.OriginID != undefined) {
                    this.OriginID = data.OriginID;
                }
                if ("SessionKey" in data && data.SessionKey != undefined) {
                    this.SessionKey = data.SessionKey;
                }
            }
        }
        get OriginID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set OriginID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get SessionKey() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set SessionKey(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            OriginID?: number;
            SessionKey?: Uint8Array;
        }) {
            const message = new PivotServerKeyExchange({});
            if (data.OriginID != null) {
                message.OriginID = data.OriginID;
            }
            if (data.SessionKey != null) {
                message.SessionKey = data.SessionKey;
            }
            return message;
        }
        toObject() {
            const data: {
                OriginID?: number;
                SessionKey?: Uint8Array;
            } = {};
            if (this.OriginID != null) {
                data.OriginID = this.OriginID;
            }
            if (this.SessionKey != null) {
                data.SessionKey = this.SessionKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.OriginID !== undefined)
                writer.writeInt64(1, this.OriginID);
            if (this.SessionKey !== undefined)
                writer.writeBytes(2, this.SessionKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotServerKeyExchange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotServerKeyExchange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.OriginID = reader.readInt64();
                        break;
                    case 2:
                        message.SessionKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotServerKeyExchange {
            return PivotServerKeyExchange.deserialize(bytes);
        }
    }
    export class PivotPeer extends pb_1.Message {
        constructor(data?: any[] | {
            PeerID?: string;
            Name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PeerID" in data && data.PeerID != undefined) {
                    this.PeerID = data.PeerID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
            }
        }
        get PeerID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set PeerID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            PeerID?: string;
            Name?: string;
        }) {
            const message = new PivotPeer({});
            if (data.PeerID != null) {
                message.PeerID = data.PeerID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            return message;
        }
        toObject() {
            const data: {
                PeerID?: string;
                Name?: string;
            } = {};
            if (this.PeerID != null) {
                data.PeerID = this.PeerID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PeerID !== undefined)
                writer.writeInt64String(1, this.PeerID);
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(2, this.Name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotPeer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotPeer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.PeerID = reader.readInt64String();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotPeer {
            return PivotPeer.deserialize(bytes);
        }
    }
    export class PivotPeerEnvelope extends pb_1.Message {
        constructor(data?: any[] | {
            Peers?: PivotPeer[];
            Type?: number;
            PivotSessionID?: Uint8Array;
            Data?: Uint8Array;
            PeerFailureAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Peers" in data && data.Peers != undefined) {
                    this.Peers = data.Peers;
                }
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("PivotSessionID" in data && data.PivotSessionID != undefined) {
                    this.PivotSessionID = data.PivotSessionID;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("PeerFailureAt" in data && data.PeerFailureAt != undefined) {
                    this.PeerFailureAt = data.PeerFailureAt;
                }
            }
        }
        get Peers() {
            return pb_1.Message.getRepeatedWrapperField(this, PivotPeer, 1) as PivotPeer[];
        }
        set Peers(value: PivotPeer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Type() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get PivotSessionID() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set PivotSessionID(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get PeerFailureAt() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set PeerFailureAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            Peers?: ReturnType<typeof PivotPeer.prototype.toObject>[];
            Type?: number;
            PivotSessionID?: Uint8Array;
            Data?: Uint8Array;
            PeerFailureAt?: number;
        }) {
            const message = new PivotPeerEnvelope({});
            if (data.Peers != null) {
                message.Peers = data.Peers.map(item => PivotPeer.fromObject(item));
            }
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.PivotSessionID != null) {
                message.PivotSessionID = data.PivotSessionID;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.PeerFailureAt != null) {
                message.PeerFailureAt = data.PeerFailureAt;
            }
            return message;
        }
        toObject() {
            const data: {
                Peers?: ReturnType<typeof PivotPeer.prototype.toObject>[];
                Type?: number;
                PivotSessionID?: Uint8Array;
                Data?: Uint8Array;
                PeerFailureAt?: number;
            } = {};
            if (this.Peers != null) {
                data.Peers = this.Peers.map((item: PivotPeer) => item.toObject());
            }
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.PivotSessionID != null) {
                data.PivotSessionID = this.PivotSessionID;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.PeerFailureAt != null) {
                data.PeerFailureAt = this.PeerFailureAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Peers !== undefined)
                writer.writeRepeatedMessage(1, this.Peers, (item: PivotPeer) => item.serialize(writer));
            if (this.Type !== undefined)
                writer.writeUint32(2, this.Type);
            if (this.PivotSessionID !== undefined)
                writer.writeBytes(3, this.PivotSessionID);
            if (this.Data !== undefined)
                writer.writeBytes(4, this.Data);
            if (this.PeerFailureAt !== undefined)
                writer.writeInt64(5, this.PeerFailureAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotPeerEnvelope {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotPeerEnvelope();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Peers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PivotPeer.deserialize(reader), PivotPeer));
                        break;
                    case 2:
                        message.Type = reader.readUint32();
                        break;
                    case 3:
                        message.PivotSessionID = reader.readBytes();
                        break;
                    case 4:
                        message.Data = reader.readBytes();
                        break;
                    case 5:
                        message.PeerFailureAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotPeerEnvelope {
            return PivotPeerEnvelope.deserialize(bytes);
        }
    }
    export class PivotPing extends pb_1.Message {
        constructor(data?: any[] | {
            Nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Nonce" in data && data.Nonce != undefined) {
                    this.Nonce = data.Nonce;
                }
            }
        }
        get Nonce() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Nonce?: number;
        }) {
            const message = new PivotPing({});
            if (data.Nonce != null) {
                message.Nonce = data.Nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                Nonce?: number;
            } = {};
            if (this.Nonce != null) {
                data.Nonce = this.Nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Nonce !== undefined)
                writer.writeUint32(1, this.Nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotPing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotPing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Nonce = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotPing {
            return PivotPing.deserialize(bytes);
        }
    }
    export class NetConnPivot extends pb_1.Message {
        constructor(data?: any[] | {
            PeerID?: string;
            RemoteAddress?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PeerID" in data && data.PeerID != undefined) {
                    this.PeerID = data.PeerID;
                }
                if ("RemoteAddress" in data && data.RemoteAddress != undefined) {
                    this.RemoteAddress = data.RemoteAddress;
                }
            }
        }
        get PeerID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set PeerID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get RemoteAddress() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set RemoteAddress(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            PeerID?: string;
            RemoteAddress?: string;
        }) {
            const message = new NetConnPivot({});
            if (data.PeerID != null) {
                message.PeerID = data.PeerID;
            }
            if (data.RemoteAddress != null) {
                message.RemoteAddress = data.RemoteAddress;
            }
            return message;
        }
        toObject() {
            const data: {
                PeerID?: string;
                RemoteAddress?: string;
            } = {};
            if (this.PeerID != null) {
                data.PeerID = this.PeerID;
            }
            if (this.RemoteAddress != null) {
                data.RemoteAddress = this.RemoteAddress;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PeerID !== undefined)
                writer.writeInt64String(1, this.PeerID);
            if (typeof this.RemoteAddress === "string" && this.RemoteAddress.length)
                writer.writeString(2, this.RemoteAddress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetConnPivot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetConnPivot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.PeerID = reader.readInt64String();
                        break;
                    case 2:
                        message.RemoteAddress = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetConnPivot {
            return NetConnPivot.deserialize(bytes);
        }
    }
    export class PivotPeerFailure extends pb_1.Message {
        constructor(data?: any[] | {
            PeerID?: string;
            Type?: PeerFailureType;
            Err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PeerID" in data && data.PeerID != undefined) {
                    this.PeerID = data.PeerID;
                }
                if ("Type" in data && data.Type != undefined) {
                    this.Type = data.Type;
                }
                if ("Err" in data && data.Err != undefined) {
                    this.Err = data.Err;
                }
            }
        }
        get PeerID() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set PeerID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Type() {
            return pb_1.Message.getField(this, 2) as PeerFailureType;
        }
        set Type(value: PeerFailureType) {
            pb_1.Message.setField(this, 2, value);
        }
        get Err() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Err(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            PeerID?: string;
            Type?: PeerFailureType;
            Err?: string;
        }) {
            const message = new PivotPeerFailure({});
            if (data.PeerID != null) {
                message.PeerID = data.PeerID;
            }
            if (data.Type != null) {
                message.Type = data.Type;
            }
            if (data.Err != null) {
                message.Err = data.Err;
            }
            return message;
        }
        toObject() {
            const data: {
                PeerID?: string;
                Type?: PeerFailureType;
                Err?: string;
            } = {};
            if (this.PeerID != null) {
                data.PeerID = this.PeerID;
            }
            if (this.Type != null) {
                data.Type = this.Type;
            }
            if (this.Err != null) {
                data.Err = this.Err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PeerID !== undefined)
                writer.writeInt64String(1, this.PeerID);
            if (this.Type !== undefined)
                writer.writeEnum(2, this.Type);
            if (typeof this.Err === "string" && this.Err.length)
                writer.writeString(3, this.Err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotPeerFailure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotPeerFailure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.PeerID = reader.readInt64String();
                        break;
                    case 2:
                        message.Type = reader.readEnum();
                        break;
                    case 3:
                        message.Err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotPeerFailure {
            return PivotPeerFailure.deserialize(bytes);
        }
    }
    export class PivotListenersReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PivotListenersReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotListenersReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotListenersReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotListenersReq {
            return PivotListenersReq.deserialize(bytes);
        }
    }
    export class PivotListeners extends pb_1.Message {
        constructor(data?: any[] | {
            Listeners?: PivotListener[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Listeners" in data && data.Listeners != undefined) {
                    this.Listeners = data.Listeners;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Listeners() {
            return pb_1.Message.getRepeatedWrapperField(this, PivotListener, 1) as PivotListener[];
        }
        set Listeners(value: PivotListener[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Listeners?: ReturnType<typeof PivotListener.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new PivotListeners({});
            if (data.Listeners != null) {
                message.Listeners = data.Listeners.map(item => PivotListener.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Listeners?: ReturnType<typeof PivotListener.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Listeners != null) {
                data.Listeners = this.Listeners.map((item: PivotListener) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Listeners !== undefined)
                writer.writeRepeatedMessage(1, this.Listeners, (item: PivotListener) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PivotListeners {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PivotListeners();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Listeners, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PivotListener.deserialize(reader), PivotListener));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PivotListeners {
            return PivotListeners.deserialize(bytes);
        }
    }
    export class WGPortForwardStartReq extends pb_1.Message {
        constructor(data?: any[] | {
            LocalPort?: number;
            RemoteAddress?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("LocalPort" in data && data.LocalPort != undefined) {
                    this.LocalPort = data.LocalPort;
                }
                if ("RemoteAddress" in data && data.RemoteAddress != undefined) {
                    this.RemoteAddress = data.RemoteAddress;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get LocalPort() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set LocalPort(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get RemoteAddress() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set RemoteAddress(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            LocalPort?: number;
            RemoteAddress?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGPortForwardStartReq({});
            if (data.LocalPort != null) {
                message.LocalPort = data.LocalPort;
            }
            if (data.RemoteAddress != null) {
                message.RemoteAddress = data.RemoteAddress;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                LocalPort?: number;
                RemoteAddress?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.LocalPort != null) {
                data.LocalPort = this.LocalPort;
            }
            if (this.RemoteAddress != null) {
                data.RemoteAddress = this.RemoteAddress;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.LocalPort !== undefined)
                writer.writeInt32(1, this.LocalPort);
            if (typeof this.RemoteAddress === "string" && this.RemoteAddress.length)
                writer.writeString(2, this.RemoteAddress);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGPortForwardStartReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGPortForwardStartReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.LocalPort = reader.readInt32();
                        break;
                    case 2:
                        message.RemoteAddress = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGPortForwardStartReq {
            return WGPortForwardStartReq.deserialize(bytes);
        }
    }
    export class WGPortForward extends pb_1.Message {
        constructor(data?: any[] | {
            Forwarder?: WGTCPForwarder;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Forwarder" in data && data.Forwarder != undefined) {
                    this.Forwarder = data.Forwarder;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Forwarder() {
            return pb_1.Message.getWrapperField(this, WGTCPForwarder, 1) as WGTCPForwarder;
        }
        set Forwarder(value: WGTCPForwarder) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Forwarder?: ReturnType<typeof WGTCPForwarder.prototype.toObject>;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new WGPortForward({});
            if (data.Forwarder != null) {
                message.Forwarder = WGTCPForwarder.fromObject(data.Forwarder);
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Forwarder?: ReturnType<typeof WGTCPForwarder.prototype.toObject>;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Forwarder != null) {
                data.Forwarder = this.Forwarder.toObject();
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Forwarder !== undefined)
                writer.writeMessage(1, this.Forwarder, () => this.Forwarder.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGPortForward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGPortForward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Forwarder, () => message.Forwarder = WGTCPForwarder.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGPortForward {
            return WGPortForward.deserialize(bytes);
        }
    }
    export class WGPortForwardStopReq extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ID?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGPortForwardStopReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeInt32(1, this.ID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGPortForwardStopReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGPortForwardStopReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGPortForwardStopReq {
            return WGPortForwardStopReq.deserialize(bytes);
        }
    }
    export class WGSocksStartReq extends pb_1.Message {
        constructor(data?: any[] | {
            Port?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Port" in data && data.Port != undefined) {
                    this.Port = data.Port;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Port() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Port?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGSocksStartReq({});
            if (data.Port != null) {
                message.Port = data.Port;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Port?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Port != null) {
                data.Port = this.Port;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Port !== undefined)
                writer.writeInt32(1, this.Port);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocksStartReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocksStartReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Port = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocksStartReq {
            return WGSocksStartReq.deserialize(bytes);
        }
    }
    export class WGSocks extends pb_1.Message {
        constructor(data?: any[] | {
            Server?: WGSocksServer;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Server" in data && data.Server != undefined) {
                    this.Server = data.Server;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Server() {
            return pb_1.Message.getWrapperField(this, WGSocksServer, 1) as WGSocksServer;
        }
        set Server(value: WGSocksServer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Server?: ReturnType<typeof WGSocksServer.prototype.toObject>;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new WGSocks({});
            if (data.Server != null) {
                message.Server = WGSocksServer.fromObject(data.Server);
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Server?: ReturnType<typeof WGSocksServer.prototype.toObject>;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Server != null) {
                data.Server = this.Server.toObject();
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Server !== undefined)
                writer.writeMessage(1, this.Server, () => this.Server.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Server, () => message.Server = WGSocksServer.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocks {
            return WGSocks.deserialize(bytes);
        }
    }
    export class WGSocksStopReq extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ID?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGSocksStopReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeInt32(1, this.ID);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocksStopReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocksStopReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readInt32();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocksStopReq {
            return WGSocksStopReq.deserialize(bytes);
        }
    }
    export class WGTCPForwardersReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGTCPForwardersReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGTCPForwardersReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGTCPForwardersReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGTCPForwardersReq {
            return WGTCPForwardersReq.deserialize(bytes);
        }
    }
    export class WGSocksServersReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new WGSocksServersReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocksServersReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocksServersReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocksServersReq {
            return WGSocksServersReq.deserialize(bytes);
        }
    }
    export class WGTCPForwarder extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            LocalAddr?: string;
            RemoteAddr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("LocalAddr" in data && data.LocalAddr != undefined) {
                    this.LocalAddr = data.LocalAddr;
                }
                if ("RemoteAddr" in data && data.RemoteAddr != undefined) {
                    this.RemoteAddr = data.RemoteAddr;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get LocalAddr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set LocalAddr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get RemoteAddr() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set RemoteAddr(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ID?: number;
            LocalAddr?: string;
            RemoteAddr?: string;
        }) {
            const message = new WGTCPForwarder({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.LocalAddr != null) {
                message.LocalAddr = data.LocalAddr;
            }
            if (data.RemoteAddr != null) {
                message.RemoteAddr = data.RemoteAddr;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                LocalAddr?: string;
                RemoteAddr?: string;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.LocalAddr != null) {
                data.LocalAddr = this.LocalAddr;
            }
            if (this.RemoteAddr != null) {
                data.RemoteAddr = this.RemoteAddr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeInt32(1, this.ID);
            if (typeof this.LocalAddr === "string" && this.LocalAddr.length)
                writer.writeString(2, this.LocalAddr);
            if (typeof this.RemoteAddr === "string" && this.RemoteAddr.length)
                writer.writeString(3, this.RemoteAddr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGTCPForwarder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGTCPForwarder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readInt32();
                        break;
                    case 2:
                        message.LocalAddr = reader.readString();
                        break;
                    case 3:
                        message.RemoteAddr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGTCPForwarder {
            return WGTCPForwarder.deserialize(bytes);
        }
    }
    export class WGSocksServer extends pb_1.Message {
        constructor(data?: any[] | {
            ID?: number;
            LocalAddr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("LocalAddr" in data && data.LocalAddr != undefined) {
                    this.LocalAddr = data.LocalAddr;
                }
            }
        }
        get ID() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get LocalAddr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set LocalAddr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ID?: number;
            LocalAddr?: string;
        }) {
            const message = new WGSocksServer({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.LocalAddr != null) {
                message.LocalAddr = data.LocalAddr;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: number;
                LocalAddr?: string;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.LocalAddr != null) {
                data.LocalAddr = this.LocalAddr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID !== undefined)
                writer.writeInt32(1, this.ID);
            if (typeof this.LocalAddr === "string" && this.LocalAddr.length)
                writer.writeString(2, this.LocalAddr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocksServer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocksServer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readInt32();
                        break;
                    case 2:
                        message.LocalAddr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocksServer {
            return WGSocksServer.deserialize(bytes);
        }
    }
    export class WGSocksServers extends pb_1.Message {
        constructor(data?: any[] | {
            Servers?: WGSocksServer[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Servers" in data && data.Servers != undefined) {
                    this.Servers = data.Servers;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Servers() {
            return pb_1.Message.getRepeatedWrapperField(this, WGSocksServer, 1) as WGSocksServer[];
        }
        set Servers(value: WGSocksServer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Servers?: ReturnType<typeof WGSocksServer.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new WGSocksServers({});
            if (data.Servers != null) {
                message.Servers = data.Servers.map(item => WGSocksServer.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Servers?: ReturnType<typeof WGSocksServer.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Servers != null) {
                data.Servers = this.Servers.map((item: WGSocksServer) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Servers !== undefined)
                writer.writeRepeatedMessage(1, this.Servers, (item: WGSocksServer) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGSocksServers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGSocksServers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Servers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WGSocksServer.deserialize(reader), WGSocksServer));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGSocksServers {
            return WGSocksServers.deserialize(bytes);
        }
    }
    export class WGTCPForwarders extends pb_1.Message {
        constructor(data?: any[] | {
            Forwarders?: WGTCPForwarder[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Forwarders" in data && data.Forwarders != undefined) {
                    this.Forwarders = data.Forwarders;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Forwarders() {
            return pb_1.Message.getRepeatedWrapperField(this, WGTCPForwarder, 1) as WGTCPForwarder[];
        }
        set Forwarders(value: WGTCPForwarder[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Forwarders?: ReturnType<typeof WGTCPForwarder.prototype.toObject>[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new WGTCPForwarders({});
            if (data.Forwarders != null) {
                message.Forwarders = data.Forwarders.map(item => WGTCPForwarder.fromObject(item));
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Forwarders?: ReturnType<typeof WGTCPForwarder.prototype.toObject>[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Forwarders != null) {
                data.Forwarders = this.Forwarders.map((item: WGTCPForwarder) => item.toObject());
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Forwarders !== undefined)
                writer.writeRepeatedMessage(1, this.Forwarders, (item: WGTCPForwarder) => item.serialize(writer));
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WGTCPForwarders {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WGTCPForwarders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Forwarders, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WGTCPForwarder.deserialize(reader), WGTCPForwarder));
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WGTCPForwarders {
            return WGTCPForwarders.deserialize(bytes);
        }
    }
    export class ReconfigureReq extends pb_1.Message {
        constructor(data?: any[] | {
            ReconnectInterval?: number;
            BeaconInterval?: number;
            BeaconJitter?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ReconnectInterval" in data && data.ReconnectInterval != undefined) {
                    this.ReconnectInterval = data.ReconnectInterval;
                }
                if ("BeaconInterval" in data && data.BeaconInterval != undefined) {
                    this.BeaconInterval = data.BeaconInterval;
                }
                if ("BeaconJitter" in data && data.BeaconJitter != undefined) {
                    this.BeaconJitter = data.BeaconJitter;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get ReconnectInterval() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ReconnectInterval(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get BeaconInterval() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set BeaconInterval(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get BeaconJitter() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set BeaconJitter(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            ReconnectInterval?: number;
            BeaconInterval?: number;
            BeaconJitter?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ReconfigureReq({});
            if (data.ReconnectInterval != null) {
                message.ReconnectInterval = data.ReconnectInterval;
            }
            if (data.BeaconInterval != null) {
                message.BeaconInterval = data.BeaconInterval;
            }
            if (data.BeaconJitter != null) {
                message.BeaconJitter = data.BeaconJitter;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                ReconnectInterval?: number;
                BeaconInterval?: number;
                BeaconJitter?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.ReconnectInterval != null) {
                data.ReconnectInterval = this.ReconnectInterval;
            }
            if (this.BeaconInterval != null) {
                data.BeaconInterval = this.BeaconInterval;
            }
            if (this.BeaconJitter != null) {
                data.BeaconJitter = this.BeaconJitter;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ReconnectInterval !== undefined)
                writer.writeInt64(1, this.ReconnectInterval);
            if (this.BeaconInterval !== undefined)
                writer.writeInt64(2, this.BeaconInterval);
            if (this.BeaconJitter !== undefined)
                writer.writeInt64(3, this.BeaconJitter);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReconfigureReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReconfigureReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ReconnectInterval = reader.readInt64();
                        break;
                    case 2:
                        message.BeaconInterval = reader.readInt64();
                        break;
                    case 3:
                        message.BeaconJitter = reader.readInt64();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReconfigureReq {
            return ReconfigureReq.deserialize(bytes);
        }
    }
    export class Reconfigure extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new Reconfigure({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reconfigure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reconfigure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reconfigure {
            return Reconfigure.deserialize(bytes);
        }
    }
    export class PollIntervalReq extends pb_1.Message {
        constructor(data?: any[] | {
            PollInterval?: number;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PollInterval" in data && data.PollInterval != undefined) {
                    this.PollInterval = data.PollInterval;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get PollInterval() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set PollInterval(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            PollInterval?: number;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new PollIntervalReq({});
            if (data.PollInterval != null) {
                message.PollInterval = data.PollInterval;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                PollInterval?: number;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.PollInterval != null) {
                data.PollInterval = this.PollInterval;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PollInterval !== undefined)
                writer.writeInt64(1, this.PollInterval);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PollIntervalReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PollIntervalReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.PollInterval = reader.readInt64();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PollIntervalReq {
            return PollIntervalReq.deserialize(bytes);
        }
    }
    export class PollInterval extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new PollInterval({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PollInterval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PollInterval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PollInterval {
            return PollInterval.deserialize(bytes);
        }
    }
    export class SSHCommandReq extends pb_1.Message {
        constructor(data?: any[] | {
            Username?: string;
            Hostname?: string;
            Port?: number;
            Command?: string;
            Password?: string;
            PrivKey?: Uint8Array;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Username" in data && data.Username != undefined) {
                    this.Username = data.Username;
                }
                if ("Hostname" in data && data.Hostname != undefined) {
                    this.Hostname = data.Hostname;
                }
                if ("Port" in data && data.Port != undefined) {
                    this.Port = data.Port;
                }
                if ("Command" in data && data.Command != undefined) {
                    this.Command = data.Command;
                }
                if ("Password" in data && data.Password != undefined) {
                    this.Password = data.Password;
                }
                if ("PrivKey" in data && data.PrivKey != undefined) {
                    this.PrivKey = data.PrivKey;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Username() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Hostname() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Hostname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Port() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set Port(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Command() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Command(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Password() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set Password(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get PrivKey() {
            return pb_1.Message.getField(this, 6) as Uint8Array;
        }
        set PrivKey(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Username?: string;
            Hostname?: string;
            Port?: number;
            Command?: string;
            Password?: string;
            PrivKey?: Uint8Array;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new SSHCommandReq({});
            if (data.Username != null) {
                message.Username = data.Username;
            }
            if (data.Hostname != null) {
                message.Hostname = data.Hostname;
            }
            if (data.Port != null) {
                message.Port = data.Port;
            }
            if (data.Command != null) {
                message.Command = data.Command;
            }
            if (data.Password != null) {
                message.Password = data.Password;
            }
            if (data.PrivKey != null) {
                message.PrivKey = data.PrivKey;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Username?: string;
                Hostname?: string;
                Port?: number;
                Command?: string;
                Password?: string;
                PrivKey?: Uint8Array;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Username != null) {
                data.Username = this.Username;
            }
            if (this.Hostname != null) {
                data.Hostname = this.Hostname;
            }
            if (this.Port != null) {
                data.Port = this.Port;
            }
            if (this.Command != null) {
                data.Command = this.Command;
            }
            if (this.Password != null) {
                data.Password = this.Password;
            }
            if (this.PrivKey != null) {
                data.PrivKey = this.PrivKey;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Username === "string" && this.Username.length)
                writer.writeString(1, this.Username);
            if (typeof this.Hostname === "string" && this.Hostname.length)
                writer.writeString(2, this.Hostname);
            if (this.Port !== undefined)
                writer.writeUint32(3, this.Port);
            if (typeof this.Command === "string" && this.Command.length)
                writer.writeString(4, this.Command);
            if (typeof this.Password === "string" && this.Password.length)
                writer.writeString(5, this.Password);
            if (this.PrivKey !== undefined)
                writer.writeBytes(6, this.PrivKey);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SSHCommandReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SSHCommandReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Username = reader.readString();
                        break;
                    case 2:
                        message.Hostname = reader.readString();
                        break;
                    case 3:
                        message.Port = reader.readUint32();
                        break;
                    case 4:
                        message.Command = reader.readString();
                        break;
                    case 5:
                        message.Password = reader.readString();
                        break;
                    case 6:
                        message.PrivKey = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SSHCommandReq {
            return SSHCommandReq.deserialize(bytes);
        }
    }
    export class SSHCommand extends pb_1.Message {
        constructor(data?: any[] | {
            StdOut?: string;
            StdErr?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("StdOut" in data && data.StdOut != undefined) {
                    this.StdOut = data.StdOut;
                }
                if ("StdErr" in data && data.StdErr != undefined) {
                    this.StdErr = data.StdErr;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get StdOut() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set StdOut(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get StdErr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set StdErr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            StdOut?: string;
            StdErr?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new SSHCommand({});
            if (data.StdOut != null) {
                message.StdOut = data.StdOut;
            }
            if (data.StdErr != null) {
                message.StdErr = data.StdErr;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                StdOut?: string;
                StdErr?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.StdOut != null) {
                data.StdOut = this.StdOut;
            }
            if (this.StdErr != null) {
                data.StdErr = this.StdErr;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.StdOut === "string" && this.StdOut.length)
                writer.writeString(1, this.StdOut);
            if (typeof this.StdErr === "string" && this.StdErr.length)
                writer.writeString(2, this.StdErr);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SSHCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SSHCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.StdOut = reader.readString();
                        break;
                    case 2:
                        message.StdErr = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SSHCommand {
            return SSHCommand.deserialize(bytes);
        }
    }
    export class GetPrivsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new GetPrivsReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPrivsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPrivsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPrivsReq {
            return GetPrivsReq.deserialize(bytes);
        }
    }
    export class WindowsPrivilegeEntry extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Description?: string;
            Enabled?: boolean;
            EnabledByDefault?: boolean;
            Removed?: boolean;
            UsedForAccess?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Description" in data && data.Description != undefined) {
                    this.Description = data.Description;
                }
                if ("Enabled" in data && data.Enabled != undefined) {
                    this.Enabled = data.Enabled;
                }
                if ("EnabledByDefault" in data && data.EnabledByDefault != undefined) {
                    this.EnabledByDefault = data.EnabledByDefault;
                }
                if ("Removed" in data && data.Removed != undefined) {
                    this.Removed = data.Removed;
                }
                if ("UsedForAccess" in data && data.UsedForAccess != undefined) {
                    this.UsedForAccess = data.UsedForAccess;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Description() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Enabled() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set Enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get EnabledByDefault() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set EnabledByDefault(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get Removed() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set Removed(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get UsedForAccess() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set UsedForAccess(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            Name?: string;
            Description?: string;
            Enabled?: boolean;
            EnabledByDefault?: boolean;
            Removed?: boolean;
            UsedForAccess?: boolean;
        }) {
            const message = new WindowsPrivilegeEntry({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Description != null) {
                message.Description = data.Description;
            }
            if (data.Enabled != null) {
                message.Enabled = data.Enabled;
            }
            if (data.EnabledByDefault != null) {
                message.EnabledByDefault = data.EnabledByDefault;
            }
            if (data.Removed != null) {
                message.Removed = data.Removed;
            }
            if (data.UsedForAccess != null) {
                message.UsedForAccess = data.UsedForAccess;
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Description?: string;
                Enabled?: boolean;
                EnabledByDefault?: boolean;
                Removed?: boolean;
                UsedForAccess?: boolean;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Description != null) {
                data.Description = this.Description;
            }
            if (this.Enabled != null) {
                data.Enabled = this.Enabled;
            }
            if (this.EnabledByDefault != null) {
                data.EnabledByDefault = this.EnabledByDefault;
            }
            if (this.Removed != null) {
                data.Removed = this.Removed;
            }
            if (this.UsedForAccess != null) {
                data.UsedForAccess = this.UsedForAccess;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (typeof this.Description === "string" && this.Description.length)
                writer.writeString(2, this.Description);
            if (this.Enabled !== undefined)
                writer.writeBool(3, this.Enabled);
            if (this.EnabledByDefault !== undefined)
                writer.writeBool(4, this.EnabledByDefault);
            if (this.Removed !== undefined)
                writer.writeBool(5, this.Removed);
            if (this.UsedForAccess !== undefined)
                writer.writeBool(6, this.UsedForAccess);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WindowsPrivilegeEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WindowsPrivilegeEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.Description = reader.readString();
                        break;
                    case 3:
                        message.Enabled = reader.readBool();
                        break;
                    case 4:
                        message.EnabledByDefault = reader.readBool();
                        break;
                    case 5:
                        message.Removed = reader.readBool();
                        break;
                    case 6:
                        message.UsedForAccess = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WindowsPrivilegeEntry {
            return WindowsPrivilegeEntry.deserialize(bytes);
        }
    }
    export class GetPrivs extends pb_1.Message {
        constructor(data?: any[] | {
            PrivInfo?: WindowsPrivilegeEntry[];
            ProcessIntegrity?: string;
            ProcessName?: string;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("PrivInfo" in data && data.PrivInfo != undefined) {
                    this.PrivInfo = data.PrivInfo;
                }
                if ("ProcessIntegrity" in data && data.ProcessIntegrity != undefined) {
                    this.ProcessIntegrity = data.ProcessIntegrity;
                }
                if ("ProcessName" in data && data.ProcessName != undefined) {
                    this.ProcessName = data.ProcessName;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get PrivInfo() {
            return pb_1.Message.getRepeatedWrapperField(this, WindowsPrivilegeEntry, 1) as WindowsPrivilegeEntry[];
        }
        set PrivInfo(value: WindowsPrivilegeEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get ProcessIntegrity() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ProcessIntegrity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ProcessName() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set ProcessName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            PrivInfo?: ReturnType<typeof WindowsPrivilegeEntry.prototype.toObject>[];
            ProcessIntegrity?: string;
            ProcessName?: string;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new GetPrivs({});
            if (data.PrivInfo != null) {
                message.PrivInfo = data.PrivInfo.map(item => WindowsPrivilegeEntry.fromObject(item));
            }
            if (data.ProcessIntegrity != null) {
                message.ProcessIntegrity = data.ProcessIntegrity;
            }
            if (data.ProcessName != null) {
                message.ProcessName = data.ProcessName;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                PrivInfo?: ReturnType<typeof WindowsPrivilegeEntry.prototype.toObject>[];
                ProcessIntegrity?: string;
                ProcessName?: string;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.PrivInfo != null) {
                data.PrivInfo = this.PrivInfo.map((item: WindowsPrivilegeEntry) => item.toObject());
            }
            if (this.ProcessIntegrity != null) {
                data.ProcessIntegrity = this.ProcessIntegrity;
            }
            if (this.ProcessName != null) {
                data.ProcessName = this.ProcessName;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.PrivInfo !== undefined)
                writer.writeRepeatedMessage(1, this.PrivInfo, (item: WindowsPrivilegeEntry) => item.serialize(writer));
            if (typeof this.ProcessIntegrity === "string" && this.ProcessIntegrity.length)
                writer.writeString(2, this.ProcessIntegrity);
            if (typeof this.ProcessName === "string" && this.ProcessName.length)
                writer.writeString(3, this.ProcessName);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPrivs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPrivs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.PrivInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WindowsPrivilegeEntry.deserialize(reader), WindowsPrivilegeEntry));
                        break;
                    case 2:
                        message.ProcessIntegrity = reader.readString();
                        break;
                    case 3:
                        message.ProcessName = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPrivs {
            return GetPrivs.deserialize(bytes);
        }
    }
    export class RegisterExtensionReq extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Data?: Uint8Array;
            OS?: string;
            Init?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("OS" in data && data.OS != undefined) {
                    this.OS = data.OS;
                }
                if ("Init" in data && data.Init != undefined) {
                    this.Init = data.Init;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get OS() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set OS(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Init() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Init(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Name?: string;
            Data?: Uint8Array;
            OS?: string;
            Init?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new RegisterExtensionReq({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.OS != null) {
                message.OS = data.OS;
            }
            if (data.Init != null) {
                message.Init = data.Init;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Data?: Uint8Array;
                OS?: string;
                Init?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.OS != null) {
                data.OS = this.OS;
            }
            if (this.Init != null) {
                data.Init = this.Init;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.Data !== undefined)
                writer.writeBytes(2, this.Data);
            if (typeof this.OS === "string" && this.OS.length)
                writer.writeString(3, this.OS);
            if (typeof this.Init === "string" && this.Init.length)
                writer.writeString(4, this.Init);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterExtensionReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterExtensionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.Data = reader.readBytes();
                        break;
                    case 3:
                        message.OS = reader.readString();
                        break;
                    case 4:
                        message.Init = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterExtensionReq {
            return RegisterExtensionReq.deserialize(bytes);
        }
    }
    export class RegisterExtension extends pb_1.Message {
        constructor(data?: any[] | {
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new RegisterExtension({});
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterExtension {
            return RegisterExtension.deserialize(bytes);
        }
    }
    export class CallExtensionReq extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            ServerStore?: boolean;
            Args?: Uint8Array;
            Export?: string;
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("ServerStore" in data && data.ServerStore != undefined) {
                    this.ServerStore = data.ServerStore;
                }
                if ("Args" in data && data.Args != undefined) {
                    this.Args = data.Args;
                }
                if ("Export" in data && data.Export != undefined) {
                    this.Export = data.Export;
                }
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ServerStore() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set ServerStore(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Args() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set Args(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get Export() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Export(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Name?: string;
            ServerStore?: boolean;
            Args?: Uint8Array;
            Export?: string;
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new CallExtensionReq({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.ServerStore != null) {
                message.ServerStore = data.ServerStore;
            }
            if (data.Args != null) {
                message.Args = data.Args;
            }
            if (data.Export != null) {
                message.Export = data.Export;
            }
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                ServerStore?: boolean;
                Args?: Uint8Array;
                Export?: string;
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.ServerStore != null) {
                data.ServerStore = this.ServerStore;
            }
            if (this.Args != null) {
                data.Args = this.Args;
            }
            if (this.Export != null) {
                data.Export = this.Export;
            }
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.ServerStore !== undefined)
                writer.writeBool(2, this.ServerStore);
            if (this.Args !== undefined)
                writer.writeBytes(3, this.Args);
            if (typeof this.Export === "string" && this.Export.length)
                writer.writeString(4, this.Export);
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallExtensionReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallExtensionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.ServerStore = reader.readBool();
                        break;
                    case 3:
                        message.Args = reader.readBytes();
                        break;
                    case 4:
                        message.Export = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CallExtensionReq {
            return CallExtensionReq.deserialize(bytes);
        }
    }
    export class CallExtension extends pb_1.Message {
        constructor(data?: any[] | {
            Output?: Uint8Array;
            ServerStore?: boolean;
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Output" in data && data.Output != undefined) {
                    this.Output = data.Output;
                }
                if ("ServerStore" in data && data.ServerStore != undefined) {
                    this.ServerStore = data.ServerStore;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Output() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set Output(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ServerStore() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set ServerStore(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Output?: Uint8Array;
            ServerStore?: boolean;
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new CallExtension({});
            if (data.Output != null) {
                message.Output = data.Output;
            }
            if (data.ServerStore != null) {
                message.ServerStore = data.ServerStore;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Output?: Uint8Array;
                ServerStore?: boolean;
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Output != null) {
                data.Output = this.Output;
            }
            if (this.ServerStore != null) {
                data.ServerStore = this.ServerStore;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Output !== undefined)
                writer.writeBytes(1, this.Output);
            if (this.ServerStore !== undefined)
                writer.writeBool(2, this.ServerStore);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Output = reader.readBytes();
                        break;
                    case 2:
                        message.ServerStore = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CallExtension {
            return CallExtension.deserialize(bytes);
        }
    }
    export class ListExtensionsReq extends pb_1.Message {
        constructor(data?: any[] | {
            Request?: dependency_1.commonpb.Request;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Request" in data && data.Request != undefined) {
                    this.Request = data.Request;
                }
            }
        }
        get Request() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Request, 9) as dependency_1.commonpb.Request;
        }
        set Request(value: dependency_1.commonpb.Request) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
        }) {
            const message = new ListExtensionsReq({});
            if (data.Request != null) {
                message.Request = dependency_1.commonpb.Request.fromObject(data.Request);
            }
            return message;
        }
        toObject() {
            const data: {
                Request?: ReturnType<typeof dependency_1.commonpb.Request.prototype.toObject>;
            } = {};
            if (this.Request != null) {
                data.Request = this.Request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Request !== undefined)
                writer.writeMessage(9, this.Request, () => this.Request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListExtensionsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListExtensionsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.Request, () => message.Request = dependency_1.commonpb.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListExtensionsReq {
            return ListExtensionsReq.deserialize(bytes);
        }
    }
    export class ListExtensions extends pb_1.Message {
        constructor(data?: any[] | {
            Names?: string[];
            Response?: dependency_1.commonpb.Response;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Names" in data && data.Names != undefined) {
                    this.Names = data.Names;
                }
                if ("Response" in data && data.Response != undefined) {
                    this.Response = data.Response;
                }
            }
        }
        get Names() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set Names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get Response() {
            return pb_1.Message.getWrapperField(this, dependency_1.commonpb.Response, 9) as dependency_1.commonpb.Response;
        }
        set Response(value: dependency_1.commonpb.Response) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            Names?: string[];
            Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
        }) {
            const message = new ListExtensions({});
            if (data.Names != null) {
                message.Names = data.Names;
            }
            if (data.Response != null) {
                message.Response = dependency_1.commonpb.Response.fromObject(data.Response);
            }
            return message;
        }
        toObject() {
            const data: {
                Names?: string[];
                Response?: ReturnType<typeof dependency_1.commonpb.Response.prototype.toObject>;
            } = {};
            if (this.Names != null) {
                data.Names = this.Names;
            }
            if (this.Response != null) {
                data.Response = this.Response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Names !== undefined)
                writer.writeRepeatedString(1, this.Names);
            if (this.Response !== undefined)
                writer.writeMessage(9, this.Response, () => this.Response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListExtensions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListExtensions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.Response, () => message.Response = dependency_1.commonpb.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListExtensions {
            return ListExtensions.deserialize(bytes);
        }
    }
}
