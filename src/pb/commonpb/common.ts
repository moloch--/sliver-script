/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: commonpb/common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as pb_1 from "google-protobuf";
export namespace commonpb {
    export class Empty extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class Request extends pb_1.Message {
        constructor(data?: any[] | {
            Async?: boolean;
            Timeout?: number;
            SessionID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Async" in data && data.Async != undefined) {
                    this.Async = data.Async;
                }
                if ("Timeout" in data && data.Timeout != undefined) {
                    this.Timeout = data.Timeout;
                }
                if ("SessionID" in data && data.SessionID != undefined) {
                    this.SessionID = data.SessionID;
                }
            }
        }
        get Async() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set Async(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get Timeout() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Timeout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get SessionID() {
            return pb_1.Message.getField(this, 9) as number;
        }
        set SessionID(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            Async?: boolean;
            Timeout?: number;
            SessionID?: number;
        }) {
            const message = new Request({});
            if (data.Async != null) {
                message.Async = data.Async;
            }
            if (data.Timeout != null) {
                message.Timeout = data.Timeout;
            }
            if (data.SessionID != null) {
                message.SessionID = data.SessionID;
            }
            return message;
        }
        toObject() {
            const data: {
                Async?: boolean;
                Timeout?: number;
                SessionID?: number;
            } = {};
            if (this.Async != null) {
                data.Async = this.Async;
            }
            if (this.Timeout != null) {
                data.Timeout = this.Timeout;
            }
            if (this.SessionID != null) {
                data.SessionID = this.SessionID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Async !== undefined)
                writer.writeBool(1, this.Async);
            if (this.Timeout !== undefined)
                writer.writeInt64(2, this.Timeout);
            if (this.SessionID !== undefined)
                writer.writeUint32(9, this.SessionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Async = reader.readBool();
                        break;
                    case 2:
                        message.Timeout = reader.readInt64();
                        break;
                    case 9:
                        message.SessionID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        constructor(data?: any[] | {
            Err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Err" in data && data.Err != undefined) {
                    this.Err = data.Err;
                }
            }
        }
        get Err() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Err(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Err?: string;
        }) {
            const message = new Response({});
            if (data.Err != null) {
                message.Err = data.Err;
            }
            return message;
        }
        toObject() {
            const data: {
                Err?: string;
            } = {};
            if (this.Err != null) {
                data.Err = this.Err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Err === "string" && this.Err.length)
                writer.writeString(1, this.Err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class File extends pb_1.Message {
        constructor(data?: any[] | {
            Name?: string;
            Data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
            }
        }
        get Name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Data() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Name?: string;
            Data?: Uint8Array;
        }) {
            const message = new File({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Data?: Uint8Array;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Name === "string" && this.Name.length)
                writer.writeString(1, this.Name);
            if (this.Data !== undefined)
                writer.writeBytes(2, this.Data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.Data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): File {
            return File.deserialize(bytes);
        }
    }
    export class Process extends pb_1.Message {
        constructor(data?: any[] | {
            Pid?: number;
            Ppid?: number;
            Executable?: string;
            Owner?: string;
            SessionID?: number;
            CmdLine?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Pid" in data && data.Pid != undefined) {
                    this.Pid = data.Pid;
                }
                if ("Ppid" in data && data.Ppid != undefined) {
                    this.Ppid = data.Ppid;
                }
                if ("Executable" in data && data.Executable != undefined) {
                    this.Executable = data.Executable;
                }
                if ("Owner" in data && data.Owner != undefined) {
                    this.Owner = data.Owner;
                }
                if ("SessionID" in data && data.SessionID != undefined) {
                    this.SessionID = data.SessionID;
                }
                if ("CmdLine" in data && data.CmdLine != undefined) {
                    this.CmdLine = data.CmdLine;
                }
            }
        }
        get Pid() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set Pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Ppid() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set Ppid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Executable() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set Executable(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Owner() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set Owner(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get SessionID() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set SessionID(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get CmdLine() {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set CmdLine(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            Pid?: number;
            Ppid?: number;
            Executable?: string;
            Owner?: string;
            SessionID?: number;
            CmdLine?: string[];
        }) {
            const message = new Process({});
            if (data.Pid != null) {
                message.Pid = data.Pid;
            }
            if (data.Ppid != null) {
                message.Ppid = data.Ppid;
            }
            if (data.Executable != null) {
                message.Executable = data.Executable;
            }
            if (data.Owner != null) {
                message.Owner = data.Owner;
            }
            if (data.SessionID != null) {
                message.SessionID = data.SessionID;
            }
            if (data.CmdLine != null) {
                message.CmdLine = data.CmdLine;
            }
            return message;
        }
        toObject() {
            const data: {
                Pid?: number;
                Ppid?: number;
                Executable?: string;
                Owner?: string;
                SessionID?: number;
                CmdLine?: string[];
            } = {};
            if (this.Pid != null) {
                data.Pid = this.Pid;
            }
            if (this.Ppid != null) {
                data.Ppid = this.Ppid;
            }
            if (this.Executable != null) {
                data.Executable = this.Executable;
            }
            if (this.Owner != null) {
                data.Owner = this.Owner;
            }
            if (this.SessionID != null) {
                data.SessionID = this.SessionID;
            }
            if (this.CmdLine != null) {
                data.CmdLine = this.CmdLine;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Pid !== undefined)
                writer.writeInt32(1, this.Pid);
            if (this.Ppid !== undefined)
                writer.writeInt32(2, this.Ppid);
            if (typeof this.Executable === "string" && this.Executable.length)
                writer.writeString(3, this.Executable);
            if (typeof this.Owner === "string" && this.Owner.length)
                writer.writeString(4, this.Owner);
            if (this.SessionID !== undefined)
                writer.writeInt32(5, this.SessionID);
            if (this.CmdLine !== undefined)
                writer.writeRepeatedString(6, this.CmdLine);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Process {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Process();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Pid = reader.readInt32();
                        break;
                    case 2:
                        message.Ppid = reader.readInt32();
                        break;
                    case 3:
                        message.Executable = reader.readString();
                        break;
                    case 4:
                        message.Owner = reader.readString();
                        break;
                    case 5:
                        message.SessionID = reader.readInt32();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Process {
            return Process.deserialize(bytes);
        }
    }
    export class EnvVar extends pb_1.Message {
        constructor(data?: any[] | {
            Key?: string;
            Value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Key" in data && data.Key != undefined) {
                    this.Key = data.Key;
                }
                if ("Value" in data && data.Value != undefined) {
                    this.Value = data.Value;
                }
            }
        }
        get Key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set Key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set Value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Key?: string;
            Value?: string;
        }) {
            const message = new EnvVar({});
            if (data.Key != null) {
                message.Key = data.Key;
            }
            if (data.Value != null) {
                message.Value = data.Value;
            }
            return message;
        }
        toObject() {
            const data: {
                Key?: string;
                Value?: string;
            } = {};
            if (this.Key != null) {
                data.Key = this.Key;
            }
            if (this.Value != null) {
                data.Value = this.Value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.Key === "string" && this.Key.length)
                writer.writeString(1, this.Key);
            if (typeof this.Value === "string" && this.Value.length)
                writer.writeString(2, this.Value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnvVar {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnvVar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Key = reader.readString();
                        break;
                    case 2:
                        message.Value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnvVar {
            return EnvVar.deserialize(bytes);
        }
    }
}
