/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: rpcpb/services.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as dependency_1 from "./../commonpb/common";
import * as dependency_2 from "./../sliverpb/sliver";
import * as dependency_3 from "./../clientpb/client";
import * as grpc_1 from "@grpc/grpc-js";
export namespace rpcpb {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSliverRPCService {
        static definition = {
            GetVersion: {
                path: "/rpcpb.SliverRPC/GetVersion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Version) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Version.deserialize(new Uint8Array(bytes))
            },
            GetOperators: {
                path: "/rpcpb.SliverRPC/GetOperators",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Operators) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Operators.deserialize(new Uint8Array(bytes))
            },
            GetSessions: {
                path: "/rpcpb.SliverRPC/GetSessions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Sessions) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Sessions.deserialize(new Uint8Array(bytes))
            },
            KillSession: {
                path: "/rpcpb.SliverRPC/KillSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.KillSessionReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.KillSessionReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            UpdateSession: {
                path: "/rpcpb.SliverRPC/UpdateSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.UpdateSession) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.UpdateSession.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Session) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Session.deserialize(new Uint8Array(bytes))
            },
            MonitorStart: {
                path: "/rpcpb.SliverRPC/MonitorStart",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Response.deserialize(new Uint8Array(bytes))
            },
            MonitorStop: {
                path: "/rpcpb.SliverRPC/MonitorStop",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            GetJobs: {
                path: "/rpcpb.SliverRPC/GetJobs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Jobs) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Jobs.deserialize(new Uint8Array(bytes))
            },
            KillJob: {
                path: "/rpcpb.SliverRPC/KillJob",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.KillJobReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.KillJobReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.KillJob) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.KillJob.deserialize(new Uint8Array(bytes))
            },
            StartMTLSListener: {
                path: "/rpcpb.SliverRPC/StartMTLSListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.MTLSListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.MTLSListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.MTLSListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.MTLSListener.deserialize(new Uint8Array(bytes))
            },
            StartWGListener: {
                path: "/rpcpb.SliverRPC/StartWGListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.WGListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.WGListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.WGListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.WGListener.deserialize(new Uint8Array(bytes))
            },
            StartDNSListener: {
                path: "/rpcpb.SliverRPC/StartDNSListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.DNSListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.DNSListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.DNSListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.DNSListener.deserialize(new Uint8Array(bytes))
            },
            StartHTTPSListener: {
                path: "/rpcpb.SliverRPC/StartHTTPSListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.HTTPListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.HTTPListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.HTTPListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.HTTPListener.deserialize(new Uint8Array(bytes))
            },
            StartHTTPListener: {
                path: "/rpcpb.SliverRPC/StartHTTPListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.HTTPListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.HTTPListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.HTTPListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.HTTPListener.deserialize(new Uint8Array(bytes))
            },
            StartTCPStagerListener: {
                path: "/rpcpb.SliverRPC/StartTCPStagerListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.StagerListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.StagerListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.StagerListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.StagerListener.deserialize(new Uint8Array(bytes))
            },
            StartHTTPStagerListener: {
                path: "/rpcpb.SliverRPC/StartHTTPStagerListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.StagerListenerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.StagerListenerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.StagerListener) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.StagerListener.deserialize(new Uint8Array(bytes))
            },
            LootAdd: {
                path: "/rpcpb.SliverRPC/LootAdd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes))
            },
            LootRm: {
                path: "/rpcpb.SliverRPC/LootRm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            LootUpdate: {
                path: "/rpcpb.SliverRPC/LootUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes))
            },
            LootContent: {
                path: "/rpcpb.SliverRPC/LootContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes))
            },
            LootAll: {
                path: "/rpcpb.SliverRPC/LootAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.AllLoot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.AllLoot.deserialize(new Uint8Array(bytes))
            },
            LootAllOf: {
                path: "/rpcpb.SliverRPC/LootAllOf",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Loot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Loot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.AllLoot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.AllLoot.deserialize(new Uint8Array(bytes))
            },
            Generate: {
                path: "/rpcpb.SliverRPC/Generate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.GenerateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.GenerateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Generate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Generate.deserialize(new Uint8Array(bytes))
            },
            Regenerate: {
                path: "/rpcpb.SliverRPC/Regenerate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.RegenerateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.RegenerateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Generate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Generate.deserialize(new Uint8Array(bytes))
            },
            ImplantBuilds: {
                path: "/rpcpb.SliverRPC/ImplantBuilds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.ImplantBuilds) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.ImplantBuilds.deserialize(new Uint8Array(bytes))
            },
            DeleteImplantBuild: {
                path: "/rpcpb.SliverRPC/DeleteImplantBuild",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.DeleteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.DeleteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            Canaries: {
                path: "/rpcpb.SliverRPC/Canaries",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Canaries) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Canaries.deserialize(new Uint8Array(bytes))
            },
            GenerateWGClientConfig: {
                path: "/rpcpb.SliverRPC/GenerateWGClientConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.WGClientConfig) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.WGClientConfig.deserialize(new Uint8Array(bytes))
            },
            GenerateUniqueIP: {
                path: "/rpcpb.SliverRPC/GenerateUniqueIP",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.UniqueWGIP) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.UniqueWGIP.deserialize(new Uint8Array(bytes))
            },
            ImplantProfiles: {
                path: "/rpcpb.SliverRPC/ImplantProfiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.ImplantProfiles) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.ImplantProfiles.deserialize(new Uint8Array(bytes))
            },
            DeleteImplantProfile: {
                path: "/rpcpb.SliverRPC/DeleteImplantProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.DeleteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.DeleteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            SaveImplantProfile: {
                path: "/rpcpb.SliverRPC/SaveImplantProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.ImplantProfile) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.ImplantProfile.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.ImplantProfile) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.ImplantProfile.deserialize(new Uint8Array(bytes))
            },
            MsfStage: {
                path: "/rpcpb.SliverRPC/MsfStage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.MsfStagerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.MsfStagerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.MsfStager) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.MsfStager.deserialize(new Uint8Array(bytes))
            },
            ShellcodeRDI: {
                path: "/rpcpb.SliverRPC/ShellcodeRDI",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.ShellcodeRDIReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.ShellcodeRDIReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.ShellcodeRDI) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.ShellcodeRDI.deserialize(new Uint8Array(bytes))
            },
            GetCompiler: {
                path: "/rpcpb.SliverRPC/GetCompiler",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Compiler) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Compiler.deserialize(new Uint8Array(bytes))
            },
            Websites: {
                path: "/rpcpb.SliverRPC/Websites",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Websites) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Websites.deserialize(new Uint8Array(bytes))
            },
            Website: {
                path: "/rpcpb.SliverRPC/Website",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes))
            },
            WebsiteRemove: {
                path: "/rpcpb.SliverRPC/WebsiteRemove",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            WebsiteAddContent: {
                path: "/rpcpb.SliverRPC/WebsiteAddContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.WebsiteAddContent) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.WebsiteAddContent.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes))
            },
            WebsiteUpdateContent: {
                path: "/rpcpb.SliverRPC/WebsiteUpdateContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.WebsiteAddContent) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.WebsiteAddContent.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes))
            },
            WebsiteRemoveContent: {
                path: "/rpcpb.SliverRPC/WebsiteRemoveContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.WebsiteRemoveContent) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.WebsiteRemoveContent.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Website) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Website.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/rpcpb.SliverRPC/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.Ping) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Ping.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Ping) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Ping.deserialize(new Uint8Array(bytes))
            },
            Ps: {
                path: "/rpcpb.SliverRPC/Ps",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.PsReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.PsReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Ps) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Ps.deserialize(new Uint8Array(bytes))
            },
            Terminate: {
                path: "/rpcpb.SliverRPC/Terminate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.TerminateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TerminateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Terminate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Terminate.deserialize(new Uint8Array(bytes))
            },
            Ifconfig: {
                path: "/rpcpb.SliverRPC/Ifconfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.IfconfigReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.IfconfigReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Ifconfig) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Ifconfig.deserialize(new Uint8Array(bytes))
            },
            Netstat: {
                path: "/rpcpb.SliverRPC/Netstat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.NetstatReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.NetstatReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Netstat) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Netstat.deserialize(new Uint8Array(bytes))
            },
            Ls: {
                path: "/rpcpb.SliverRPC/Ls",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.LsReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.LsReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Ls) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Ls.deserialize(new Uint8Array(bytes))
            },
            Cd: {
                path: "/rpcpb.SliverRPC/Cd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.CdReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.CdReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Pwd) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Pwd.deserialize(new Uint8Array(bytes))
            },
            Pwd: {
                path: "/rpcpb.SliverRPC/Pwd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.PwdReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.PwdReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Pwd) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Pwd.deserialize(new Uint8Array(bytes))
            },
            Rm: {
                path: "/rpcpb.SliverRPC/Rm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RmReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RmReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Rm) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Rm.deserialize(new Uint8Array(bytes))
            },
            Mkdir: {
                path: "/rpcpb.SliverRPC/Mkdir",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.MkdirReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.MkdirReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Mkdir) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Mkdir.deserialize(new Uint8Array(bytes))
            },
            Download: {
                path: "/rpcpb.SliverRPC/Download",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.DownloadReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.DownloadReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Download) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Download.deserialize(new Uint8Array(bytes))
            },
            Upload: {
                path: "/rpcpb.SliverRPC/Upload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.UploadReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.UploadReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Upload) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Upload.deserialize(new Uint8Array(bytes))
            },
            ProcessDump: {
                path: "/rpcpb.SliverRPC/ProcessDump",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ProcessDumpReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ProcessDumpReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.ProcessDump) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ProcessDump.deserialize(new Uint8Array(bytes))
            },
            RunAs: {
                path: "/rpcpb.SliverRPC/RunAs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RunAsReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RunAsReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.RunAs) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RunAs.deserialize(new Uint8Array(bytes))
            },
            Impersonate: {
                path: "/rpcpb.SliverRPC/Impersonate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ImpersonateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ImpersonateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Impersonate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Impersonate.deserialize(new Uint8Array(bytes))
            },
            RevToSelf: {
                path: "/rpcpb.SliverRPC/RevToSelf",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RevToSelfReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RevToSelfReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.RevToSelf) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RevToSelf.deserialize(new Uint8Array(bytes))
            },
            GetSystem: {
                path: "/rpcpb.SliverRPC/GetSystem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.GetSystemReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.GetSystemReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.GetSystem) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.GetSystem.deserialize(new Uint8Array(bytes))
            },
            Task: {
                path: "/rpcpb.SliverRPC/Task",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.TaskReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TaskReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Task) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Task.deserialize(new Uint8Array(bytes))
            },
            Msf: {
                path: "/rpcpb.SliverRPC/Msf",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.MSFReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.MSFReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            MsfRemote: {
                path: "/rpcpb.SliverRPC/MsfRemote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.MSFRemoteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.MSFRemoteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            ExecuteAssembly: {
                path: "/rpcpb.SliverRPC/ExecuteAssembly",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ExecuteAssemblyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ExecuteAssemblyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.ExecuteAssembly) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ExecuteAssembly.deserialize(new Uint8Array(bytes))
            },
            Migrate: {
                path: "/rpcpb.SliverRPC/Migrate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.clientpb.MigrateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.clientpb.MigrateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Migrate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Migrate.deserialize(new Uint8Array(bytes))
            },
            Execute: {
                path: "/rpcpb.SliverRPC/Execute",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ExecuteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ExecuteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Execute) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Execute.deserialize(new Uint8Array(bytes))
            },
            ExecuteToken: {
                path: "/rpcpb.SliverRPC/ExecuteToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ExecuteTokenReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ExecuteTokenReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Execute) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Execute.deserialize(new Uint8Array(bytes))
            },
            Sideload: {
                path: "/rpcpb.SliverRPC/Sideload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.SideloadReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SideloadReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Sideload) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Sideload.deserialize(new Uint8Array(bytes))
            },
            SpawnDll: {
                path: "/rpcpb.SliverRPC/SpawnDll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.InvokeSpawnDllReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.InvokeSpawnDllReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.SpawnDll) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SpawnDll.deserialize(new Uint8Array(bytes))
            },
            Screenshot: {
                path: "/rpcpb.SliverRPC/Screenshot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ScreenshotReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ScreenshotReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Screenshot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Screenshot.deserialize(new Uint8Array(bytes))
            },
            NamedPipes: {
                path: "/rpcpb.SliverRPC/NamedPipes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.NamedPipesReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.NamedPipesReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.NamedPipes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.NamedPipes.deserialize(new Uint8Array(bytes))
            },
            TCPListener: {
                path: "/rpcpb.SliverRPC/TCPListener",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.TCPPivotReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TCPPivotReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.TCPPivot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TCPPivot.deserialize(new Uint8Array(bytes))
            },
            ListPivots: {
                path: "/rpcpb.SliverRPC/ListPivots",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.PivotListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.PivotListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.PivotList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.PivotList.deserialize(new Uint8Array(bytes))
            },
            StartService: {
                path: "/rpcpb.SliverRPC/StartService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.StartServiceReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.StartServiceReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.ServiceInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ServiceInfo.deserialize(new Uint8Array(bytes))
            },
            StopService: {
                path: "/rpcpb.SliverRPC/StopService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.StopServiceReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.StopServiceReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.ServiceInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ServiceInfo.deserialize(new Uint8Array(bytes))
            },
            RemoveService: {
                path: "/rpcpb.SliverRPC/RemoveService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RemoveServiceReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RemoveServiceReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.ServiceInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ServiceInfo.deserialize(new Uint8Array(bytes))
            },
            MakeToken: {
                path: "/rpcpb.SliverRPC/MakeToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.MakeTokenReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.MakeTokenReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.MakeToken) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.MakeToken.deserialize(new Uint8Array(bytes))
            },
            GetEnv: {
                path: "/rpcpb.SliverRPC/GetEnv",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.EnvReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.EnvReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.EnvInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.EnvInfo.deserialize(new Uint8Array(bytes))
            },
            SetEnv: {
                path: "/rpcpb.SliverRPC/SetEnv",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.SetEnvReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SetEnvReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.SetEnv) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SetEnv.deserialize(new Uint8Array(bytes))
            },
            UnsetEnv: {
                path: "/rpcpb.SliverRPC/UnsetEnv",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.UnsetEnvReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.UnsetEnvReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.UnsetEnv) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.UnsetEnv.deserialize(new Uint8Array(bytes))
            },
            Backdoor: {
                path: "/rpcpb.SliverRPC/Backdoor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.BackdoorReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.BackdoorReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Backdoor) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Backdoor.deserialize(new Uint8Array(bytes))
            },
            RegistryRead: {
                path: "/rpcpb.SliverRPC/RegistryRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RegistryReadReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryReadReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.RegistryRead) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryRead.deserialize(new Uint8Array(bytes))
            },
            RegistryWrite: {
                path: "/rpcpb.SliverRPC/RegistryWrite",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RegistryWriteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryWriteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.RegistryWrite) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryWrite.deserialize(new Uint8Array(bytes))
            },
            RegistryCreateKey: {
                path: "/rpcpb.SliverRPC/RegistryCreateKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.RegistryCreateKeyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryCreateKeyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.RegistryCreateKey) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.RegistryCreateKey.deserialize(new Uint8Array(bytes))
            },
            RunSSHCommand: {
                path: "/rpcpb.SliverRPC/RunSSHCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.SSHCommandReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SSHCommandReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.SSHCommand) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.SSHCommand.deserialize(new Uint8Array(bytes))
            },
            WGStartPortForward: {
                path: "/rpcpb.SliverRPC/WGStartPortForward",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGPortForwardStartReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGPortForwardStartReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGPortForward) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGPortForward.deserialize(new Uint8Array(bytes))
            },
            WGStopPortForward: {
                path: "/rpcpb.SliverRPC/WGStopPortForward",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGPortForwardStopReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGPortForwardStopReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGPortForward) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGPortForward.deserialize(new Uint8Array(bytes))
            },
            WGStartSocks: {
                path: "/rpcpb.SliverRPC/WGStartSocks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGSocksStartReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocksStartReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGSocks) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocks.deserialize(new Uint8Array(bytes))
            },
            WGStopSocks: {
                path: "/rpcpb.SliverRPC/WGStopSocks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGSocksStopReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocksStopReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGSocks) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocks.deserialize(new Uint8Array(bytes))
            },
            WGListForwarders: {
                path: "/rpcpb.SliverRPC/WGListForwarders",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGTCPForwardersReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGTCPForwardersReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGTCPForwarders) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGTCPForwarders.deserialize(new Uint8Array(bytes))
            },
            WGListSocksServers: {
                path: "/rpcpb.SliverRPC/WGListSocksServers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.WGSocksServersReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocksServersReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.WGSocksServers) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.WGSocksServers.deserialize(new Uint8Array(bytes))
            },
            Shell: {
                path: "/rpcpb.SliverRPC/Shell",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.ShellReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.ShellReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Shell) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Shell.deserialize(new Uint8Array(bytes))
            },
            Portfwd: {
                path: "/rpcpb.SliverRPC/Portfwd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.PortfwdReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.PortfwdReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Portfwd) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Portfwd.deserialize(new Uint8Array(bytes))
            },
            CreateTunnel: {
                path: "/rpcpb.SliverRPC/CreateTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.Tunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Tunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.Tunnel) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Tunnel.deserialize(new Uint8Array(bytes))
            },
            CloseTunnel: {
                path: "/rpcpb.SliverRPC/CloseTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.sliverpb.Tunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.Tunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes))
            },
            TunnelData: {
                path: "/rpcpb.SliverRPC/TunnelData",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: dependency_2.sliverpb.TunnelData) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TunnelData.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.sliverpb.TunnelData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.sliverpb.TunnelData.deserialize(new Uint8Array(bytes))
            },
            Events: {
                path: "/rpcpb.SliverRPC/Events",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_1.commonpb.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.commonpb.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.clientpb.Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.clientpb.Event.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetVersion(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Version>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Version>): void;
        abstract GetOperators(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Operators>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Operators>): void;
        abstract GetSessions(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Sessions>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Sessions>): void;
        abstract KillSession(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.KillSessionReq, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract UpdateSession(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.UpdateSession, dependency_3.clientpb.Session>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Session>): void;
        abstract MonitorStart(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_1.commonpb.Response>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Response>): void;
        abstract MonitorStop(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract GetJobs(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Jobs>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Jobs>): void;
        abstract KillJob(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.KillJobReq, dependency_3.clientpb.KillJob>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.KillJob>): void;
        abstract StartMTLSListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.MTLSListenerReq, dependency_3.clientpb.MTLSListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.MTLSListener>): void;
        abstract StartWGListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.WGListenerReq, dependency_3.clientpb.WGListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.WGListener>): void;
        abstract StartDNSListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.DNSListenerReq, dependency_3.clientpb.DNSListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.DNSListener>): void;
        abstract StartHTTPSListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.HTTPListenerReq, dependency_3.clientpb.HTTPListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.HTTPListener>): void;
        abstract StartHTTPListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.HTTPListenerReq, dependency_3.clientpb.HTTPListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.HTTPListener>): void;
        abstract StartTCPStagerListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.StagerListenerReq, dependency_3.clientpb.StagerListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.StagerListener>): void;
        abstract StartHTTPStagerListener(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.StagerListenerReq, dependency_3.clientpb.StagerListener>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.StagerListener>): void;
        abstract LootAdd(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Loot>): void;
        abstract LootRm(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Loot, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract LootUpdate(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Loot>): void;
        abstract LootContent(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Loot>): void;
        abstract LootAll(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.AllLoot>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.AllLoot>): void;
        abstract LootAllOf(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Loot, dependency_3.clientpb.AllLoot>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.AllLoot>): void;
        abstract Generate(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.GenerateReq, dependency_3.clientpb.Generate>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Generate>): void;
        abstract Regenerate(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.RegenerateReq, dependency_3.clientpb.Generate>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Generate>): void;
        abstract ImplantBuilds(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.ImplantBuilds>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.ImplantBuilds>): void;
        abstract DeleteImplantBuild(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.DeleteReq, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract Canaries(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Canaries>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Canaries>): void;
        abstract GenerateWGClientConfig(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.WGClientConfig>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.WGClientConfig>): void;
        abstract GenerateUniqueIP(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.UniqueWGIP>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.UniqueWGIP>): void;
        abstract ImplantProfiles(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.ImplantProfiles>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.ImplantProfiles>): void;
        abstract DeleteImplantProfile(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.DeleteReq, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract SaveImplantProfile(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.ImplantProfile, dependency_3.clientpb.ImplantProfile>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.ImplantProfile>): void;
        abstract MsfStage(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.MsfStagerReq, dependency_3.clientpb.MsfStager>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.MsfStager>): void;
        abstract ShellcodeRDI(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.ShellcodeRDIReq, dependency_3.clientpb.ShellcodeRDI>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.ShellcodeRDI>): void;
        abstract GetCompiler(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Compiler>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Compiler>): void;
        abstract Websites(call: grpc_1.ServerUnaryCall<dependency_1.commonpb.Empty, dependency_3.clientpb.Websites>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Websites>): void;
        abstract Website(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Website, dependency_3.clientpb.Website>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Website>): void;
        abstract WebsiteRemove(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.Website, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract WebsiteAddContent(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.WebsiteAddContent, dependency_3.clientpb.Website>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Website>): void;
        abstract WebsiteUpdateContent(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.WebsiteAddContent, dependency_3.clientpb.Website>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Website>): void;
        abstract WebsiteRemoveContent(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.WebsiteRemoveContent, dependency_3.clientpb.Website>, callback: grpc_1.sendUnaryData<dependency_3.clientpb.Website>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.Ping, dependency_2.sliverpb.Ping>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Ping>): void;
        abstract Ps(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.PsReq, dependency_2.sliverpb.Ps>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Ps>): void;
        abstract Terminate(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.TerminateReq, dependency_2.sliverpb.Terminate>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Terminate>): void;
        abstract Ifconfig(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.IfconfigReq, dependency_2.sliverpb.Ifconfig>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Ifconfig>): void;
        abstract Netstat(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.NetstatReq, dependency_2.sliverpb.Netstat>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Netstat>): void;
        abstract Ls(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.LsReq, dependency_2.sliverpb.Ls>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Ls>): void;
        abstract Cd(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.CdReq, dependency_2.sliverpb.Pwd>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Pwd>): void;
        abstract Pwd(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.PwdReq, dependency_2.sliverpb.Pwd>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Pwd>): void;
        abstract Rm(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RmReq, dependency_2.sliverpb.Rm>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Rm>): void;
        abstract Mkdir(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.MkdirReq, dependency_2.sliverpb.Mkdir>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Mkdir>): void;
        abstract Download(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.DownloadReq, dependency_2.sliverpb.Download>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Download>): void;
        abstract Upload(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.UploadReq, dependency_2.sliverpb.Upload>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Upload>): void;
        abstract ProcessDump(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ProcessDumpReq, dependency_2.sliverpb.ProcessDump>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.ProcessDump>): void;
        abstract RunAs(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RunAsReq, dependency_2.sliverpb.RunAs>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.RunAs>): void;
        abstract Impersonate(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ImpersonateReq, dependency_2.sliverpb.Impersonate>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Impersonate>): void;
        abstract RevToSelf(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RevToSelfReq, dependency_2.sliverpb.RevToSelf>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.RevToSelf>): void;
        abstract GetSystem(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.GetSystemReq, dependency_2.sliverpb.GetSystem>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.GetSystem>): void;
        abstract Task(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.TaskReq, dependency_2.sliverpb.Task>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Task>): void;
        abstract Msf(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.MSFReq, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract MsfRemote(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.MSFRemoteReq, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract ExecuteAssembly(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ExecuteAssemblyReq, dependency_2.sliverpb.ExecuteAssembly>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.ExecuteAssembly>): void;
        abstract Migrate(call: grpc_1.ServerUnaryCall<dependency_3.clientpb.MigrateReq, dependency_2.sliverpb.Migrate>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Migrate>): void;
        abstract Execute(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ExecuteReq, dependency_2.sliverpb.Execute>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Execute>): void;
        abstract ExecuteToken(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ExecuteTokenReq, dependency_2.sliverpb.Execute>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Execute>): void;
        abstract Sideload(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.SideloadReq, dependency_2.sliverpb.Sideload>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Sideload>): void;
        abstract SpawnDll(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.InvokeSpawnDllReq, dependency_2.sliverpb.SpawnDll>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.SpawnDll>): void;
        abstract Screenshot(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ScreenshotReq, dependency_2.sliverpb.Screenshot>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Screenshot>): void;
        abstract NamedPipes(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.NamedPipesReq, dependency_2.sliverpb.NamedPipes>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.NamedPipes>): void;
        abstract TCPListener(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.TCPPivotReq, dependency_2.sliverpb.TCPPivot>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.TCPPivot>): void;
        abstract ListPivots(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.PivotListReq, dependency_2.sliverpb.PivotList>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.PivotList>): void;
        abstract StartService(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.StartServiceReq, dependency_2.sliverpb.ServiceInfo>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.ServiceInfo>): void;
        abstract StopService(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.StopServiceReq, dependency_2.sliverpb.ServiceInfo>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.ServiceInfo>): void;
        abstract RemoveService(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RemoveServiceReq, dependency_2.sliverpb.ServiceInfo>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.ServiceInfo>): void;
        abstract MakeToken(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.MakeTokenReq, dependency_2.sliverpb.MakeToken>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.MakeToken>): void;
        abstract GetEnv(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.EnvReq, dependency_2.sliverpb.EnvInfo>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.EnvInfo>): void;
        abstract SetEnv(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.SetEnvReq, dependency_2.sliverpb.SetEnv>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.SetEnv>): void;
        abstract UnsetEnv(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.UnsetEnvReq, dependency_2.sliverpb.UnsetEnv>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.UnsetEnv>): void;
        abstract Backdoor(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.BackdoorReq, dependency_2.sliverpb.Backdoor>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Backdoor>): void;
        abstract RegistryRead(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RegistryReadReq, dependency_2.sliverpb.RegistryRead>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.RegistryRead>): void;
        abstract RegistryWrite(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RegistryWriteReq, dependency_2.sliverpb.RegistryWrite>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.RegistryWrite>): void;
        abstract RegistryCreateKey(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.RegistryCreateKeyReq, dependency_2.sliverpb.RegistryCreateKey>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.RegistryCreateKey>): void;
        abstract RunSSHCommand(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.SSHCommandReq, dependency_2.sliverpb.SSHCommand>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.SSHCommand>): void;
        abstract WGStartPortForward(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGPortForwardStartReq, dependency_2.sliverpb.WGPortForward>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGPortForward>): void;
        abstract WGStopPortForward(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGPortForwardStopReq, dependency_2.sliverpb.WGPortForward>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGPortForward>): void;
        abstract WGStartSocks(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGSocksStartReq, dependency_2.sliverpb.WGSocks>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGSocks>): void;
        abstract WGStopSocks(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGSocksStopReq, dependency_2.sliverpb.WGSocks>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGSocks>): void;
        abstract WGListForwarders(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGTCPForwardersReq, dependency_2.sliverpb.WGTCPForwarders>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGTCPForwarders>): void;
        abstract WGListSocksServers(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.WGSocksServersReq, dependency_2.sliverpb.WGSocksServers>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.WGSocksServers>): void;
        abstract Shell(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.ShellReq, dependency_2.sliverpb.Shell>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Shell>): void;
        abstract Portfwd(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.PortfwdReq, dependency_2.sliverpb.Portfwd>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Portfwd>): void;
        abstract CreateTunnel(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.Tunnel, dependency_2.sliverpb.Tunnel>, callback: grpc_1.sendUnaryData<dependency_2.sliverpb.Tunnel>): void;
        abstract CloseTunnel(call: grpc_1.ServerUnaryCall<dependency_2.sliverpb.Tunnel, dependency_1.commonpb.Empty>, callback: grpc_1.sendUnaryData<dependency_1.commonpb.Empty>): void;
        abstract TunnelData(call: grpc_1.ServerDuplexStream<dependency_2.sliverpb.TunnelData, dependency_2.sliverpb.TunnelData>): void;
        abstract Events(call: grpc_1.ServerWritableStream<dependency_1.commonpb.Empty, dependency_3.clientpb.Event>): void;
    }
    export class SliverRPCClient extends grpc_1.makeGenericClientConstructor(UnimplementedSliverRPCService.definition, "SliverRPC", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        GetVersion: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Version> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Version>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Version>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Version>): grpc_1.ClientUnaryCall => {
            return super.GetVersion(message, metadata, options, callback);
        };
        GetOperators: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Operators> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Operators>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Operators>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Operators>): grpc_1.ClientUnaryCall => {
            return super.GetOperators(message, metadata, options, callback);
        };
        GetSessions: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Sessions> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Sessions>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Sessions>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Sessions>): grpc_1.ClientUnaryCall => {
            return super.GetSessions(message, metadata, options, callback);
        };
        KillSession: GrpcUnaryServiceInterface<dependency_2.sliverpb.KillSessionReq, dependency_1.commonpb.Empty> = (message: dependency_2.sliverpb.KillSessionReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.KillSession(message, metadata, options, callback);
        };
        UpdateSession: GrpcUnaryServiceInterface<dependency_3.clientpb.UpdateSession, dependency_3.clientpb.Session> = (message: dependency_3.clientpb.UpdateSession, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Session>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Session>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Session>): grpc_1.ClientUnaryCall => {
            return super.UpdateSession(message, metadata, options, callback);
        };
        MonitorStart: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_1.commonpb.Response> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Response>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Response>): grpc_1.ClientUnaryCall => {
            return super.MonitorStart(message, metadata, options, callback);
        };
        MonitorStop: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_1.commonpb.Empty> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.MonitorStop(message, metadata, options, callback);
        };
        GetJobs: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Jobs> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Jobs>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Jobs>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Jobs>): grpc_1.ClientUnaryCall => {
            return super.GetJobs(message, metadata, options, callback);
        };
        KillJob: GrpcUnaryServiceInterface<dependency_3.clientpb.KillJobReq, dependency_3.clientpb.KillJob> = (message: dependency_3.clientpb.KillJobReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.KillJob>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.KillJob>, callback?: grpc_1.requestCallback<dependency_3.clientpb.KillJob>): grpc_1.ClientUnaryCall => {
            return super.KillJob(message, metadata, options, callback);
        };
        StartMTLSListener: GrpcUnaryServiceInterface<dependency_3.clientpb.MTLSListenerReq, dependency_3.clientpb.MTLSListener> = (message: dependency_3.clientpb.MTLSListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.MTLSListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.MTLSListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.MTLSListener>): grpc_1.ClientUnaryCall => {
            return super.StartMTLSListener(message, metadata, options, callback);
        };
        StartWGListener: GrpcUnaryServiceInterface<dependency_3.clientpb.WGListenerReq, dependency_3.clientpb.WGListener> = (message: dependency_3.clientpb.WGListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.WGListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.WGListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.WGListener>): grpc_1.ClientUnaryCall => {
            return super.StartWGListener(message, metadata, options, callback);
        };
        StartDNSListener: GrpcUnaryServiceInterface<dependency_3.clientpb.DNSListenerReq, dependency_3.clientpb.DNSListener> = (message: dependency_3.clientpb.DNSListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.DNSListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.DNSListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.DNSListener>): grpc_1.ClientUnaryCall => {
            return super.StartDNSListener(message, metadata, options, callback);
        };
        StartHTTPSListener: GrpcUnaryServiceInterface<dependency_3.clientpb.HTTPListenerReq, dependency_3.clientpb.HTTPListener> = (message: dependency_3.clientpb.HTTPListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>): grpc_1.ClientUnaryCall => {
            return super.StartHTTPSListener(message, metadata, options, callback);
        };
        StartHTTPListener: GrpcUnaryServiceInterface<dependency_3.clientpb.HTTPListenerReq, dependency_3.clientpb.HTTPListener> = (message: dependency_3.clientpb.HTTPListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.HTTPListener>): grpc_1.ClientUnaryCall => {
            return super.StartHTTPListener(message, metadata, options, callback);
        };
        StartTCPStagerListener: GrpcUnaryServiceInterface<dependency_3.clientpb.StagerListenerReq, dependency_3.clientpb.StagerListener> = (message: dependency_3.clientpb.StagerListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.StagerListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.StagerListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.StagerListener>): grpc_1.ClientUnaryCall => {
            return super.StartTCPStagerListener(message, metadata, options, callback);
        };
        StartHTTPStagerListener: GrpcUnaryServiceInterface<dependency_3.clientpb.StagerListenerReq, dependency_3.clientpb.StagerListener> = (message: dependency_3.clientpb.StagerListenerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.StagerListener>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.StagerListener>, callback?: grpc_1.requestCallback<dependency_3.clientpb.StagerListener>): grpc_1.ClientUnaryCall => {
            return super.StartHTTPStagerListener(message, metadata, options, callback);
        };
        LootAdd: GrpcUnaryServiceInterface<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot> = (message: dependency_3.clientpb.Loot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Loot>): grpc_1.ClientUnaryCall => {
            return super.LootAdd(message, metadata, options, callback);
        };
        LootRm: GrpcUnaryServiceInterface<dependency_3.clientpb.Loot, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.Loot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.LootRm(message, metadata, options, callback);
        };
        LootUpdate: GrpcUnaryServiceInterface<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot> = (message: dependency_3.clientpb.Loot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Loot>): grpc_1.ClientUnaryCall => {
            return super.LootUpdate(message, metadata, options, callback);
        };
        LootContent: GrpcUnaryServiceInterface<dependency_3.clientpb.Loot, dependency_3.clientpb.Loot> = (message: dependency_3.clientpb.Loot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Loot>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Loot>): grpc_1.ClientUnaryCall => {
            return super.LootContent(message, metadata, options, callback);
        };
        LootAll: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.AllLoot> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.AllLoot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.AllLoot>, callback?: grpc_1.requestCallback<dependency_3.clientpb.AllLoot>): grpc_1.ClientUnaryCall => {
            return super.LootAll(message, metadata, options, callback);
        };
        LootAllOf: GrpcUnaryServiceInterface<dependency_3.clientpb.Loot, dependency_3.clientpb.AllLoot> = (message: dependency_3.clientpb.Loot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.AllLoot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.AllLoot>, callback?: grpc_1.requestCallback<dependency_3.clientpb.AllLoot>): grpc_1.ClientUnaryCall => {
            return super.LootAllOf(message, metadata, options, callback);
        };
        Generate: GrpcUnaryServiceInterface<dependency_3.clientpb.GenerateReq, dependency_3.clientpb.Generate> = (message: dependency_3.clientpb.GenerateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Generate>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Generate>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Generate>): grpc_1.ClientUnaryCall => {
            return super.Generate(message, metadata, options, callback);
        };
        Regenerate: GrpcUnaryServiceInterface<dependency_3.clientpb.RegenerateReq, dependency_3.clientpb.Generate> = (message: dependency_3.clientpb.RegenerateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Generate>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Generate>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Generate>): grpc_1.ClientUnaryCall => {
            return super.Regenerate(message, metadata, options, callback);
        };
        ImplantBuilds: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.ImplantBuilds> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantBuilds>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantBuilds>, callback?: grpc_1.requestCallback<dependency_3.clientpb.ImplantBuilds>): grpc_1.ClientUnaryCall => {
            return super.ImplantBuilds(message, metadata, options, callback);
        };
        DeleteImplantBuild: GrpcUnaryServiceInterface<dependency_3.clientpb.DeleteReq, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.DeleteReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteImplantBuild(message, metadata, options, callback);
        };
        Canaries: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Canaries> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Canaries>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Canaries>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Canaries>): grpc_1.ClientUnaryCall => {
            return super.Canaries(message, metadata, options, callback);
        };
        GenerateWGClientConfig: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.WGClientConfig> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.WGClientConfig>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.WGClientConfig>, callback?: grpc_1.requestCallback<dependency_3.clientpb.WGClientConfig>): grpc_1.ClientUnaryCall => {
            return super.GenerateWGClientConfig(message, metadata, options, callback);
        };
        GenerateUniqueIP: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.UniqueWGIP> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.UniqueWGIP>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.UniqueWGIP>, callback?: grpc_1.requestCallback<dependency_3.clientpb.UniqueWGIP>): grpc_1.ClientUnaryCall => {
            return super.GenerateUniqueIP(message, metadata, options, callback);
        };
        ImplantProfiles: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.ImplantProfiles> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantProfiles>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantProfiles>, callback?: grpc_1.requestCallback<dependency_3.clientpb.ImplantProfiles>): grpc_1.ClientUnaryCall => {
            return super.ImplantProfiles(message, metadata, options, callback);
        };
        DeleteImplantProfile: GrpcUnaryServiceInterface<dependency_3.clientpb.DeleteReq, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.DeleteReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteImplantProfile(message, metadata, options, callback);
        };
        SaveImplantProfile: GrpcUnaryServiceInterface<dependency_3.clientpb.ImplantProfile, dependency_3.clientpb.ImplantProfile> = (message: dependency_3.clientpb.ImplantProfile, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantProfile>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ImplantProfile>, callback?: grpc_1.requestCallback<dependency_3.clientpb.ImplantProfile>): grpc_1.ClientUnaryCall => {
            return super.SaveImplantProfile(message, metadata, options, callback);
        };
        MsfStage: GrpcUnaryServiceInterface<dependency_3.clientpb.MsfStagerReq, dependency_3.clientpb.MsfStager> = (message: dependency_3.clientpb.MsfStagerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.MsfStager>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.MsfStager>, callback?: grpc_1.requestCallback<dependency_3.clientpb.MsfStager>): grpc_1.ClientUnaryCall => {
            return super.MsfStage(message, metadata, options, callback);
        };
        ShellcodeRDI: GrpcUnaryServiceInterface<dependency_3.clientpb.ShellcodeRDIReq, dependency_3.clientpb.ShellcodeRDI> = (message: dependency_3.clientpb.ShellcodeRDIReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ShellcodeRDI>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.ShellcodeRDI>, callback?: grpc_1.requestCallback<dependency_3.clientpb.ShellcodeRDI>): grpc_1.ClientUnaryCall => {
            return super.ShellcodeRDI(message, metadata, options, callback);
        };
        GetCompiler: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Compiler> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Compiler>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Compiler>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Compiler>): grpc_1.ClientUnaryCall => {
            return super.GetCompiler(message, metadata, options, callback);
        };
        Websites: GrpcUnaryServiceInterface<dependency_1.commonpb.Empty, dependency_3.clientpb.Websites> = (message: dependency_1.commonpb.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Websites>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Websites>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Websites>): grpc_1.ClientUnaryCall => {
            return super.Websites(message, metadata, options, callback);
        };
        Website: GrpcUnaryServiceInterface<dependency_3.clientpb.Website, dependency_3.clientpb.Website> = (message: dependency_3.clientpb.Website, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Website>): grpc_1.ClientUnaryCall => {
            return super.Website(message, metadata, options, callback);
        };
        WebsiteRemove: GrpcUnaryServiceInterface<dependency_3.clientpb.Website, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.Website, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.WebsiteRemove(message, metadata, options, callback);
        };
        WebsiteAddContent: GrpcUnaryServiceInterface<dependency_3.clientpb.WebsiteAddContent, dependency_3.clientpb.Website> = (message: dependency_3.clientpb.WebsiteAddContent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Website>): grpc_1.ClientUnaryCall => {
            return super.WebsiteAddContent(message, metadata, options, callback);
        };
        WebsiteUpdateContent: GrpcUnaryServiceInterface<dependency_3.clientpb.WebsiteAddContent, dependency_3.clientpb.Website> = (message: dependency_3.clientpb.WebsiteAddContent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Website>): grpc_1.ClientUnaryCall => {
            return super.WebsiteUpdateContent(message, metadata, options, callback);
        };
        WebsiteRemoveContent: GrpcUnaryServiceInterface<dependency_3.clientpb.WebsiteRemoveContent, dependency_3.clientpb.Website> = (message: dependency_3.clientpb.WebsiteRemoveContent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.clientpb.Website>, callback?: grpc_1.requestCallback<dependency_3.clientpb.Website>): grpc_1.ClientUnaryCall => {
            return super.WebsiteRemoveContent(message, metadata, options, callback);
        };
        Ping: GrpcUnaryServiceInterface<dependency_2.sliverpb.Ping, dependency_2.sliverpb.Ping> = (message: dependency_2.sliverpb.Ping, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ping>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ping>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Ping>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        Ps: GrpcUnaryServiceInterface<dependency_2.sliverpb.PsReq, dependency_2.sliverpb.Ps> = (message: dependency_2.sliverpb.PsReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ps>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ps>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Ps>): grpc_1.ClientUnaryCall => {
            return super.Ps(message, metadata, options, callback);
        };
        Terminate: GrpcUnaryServiceInterface<dependency_2.sliverpb.TerminateReq, dependency_2.sliverpb.Terminate> = (message: dependency_2.sliverpb.TerminateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Terminate>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Terminate>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Terminate>): grpc_1.ClientUnaryCall => {
            return super.Terminate(message, metadata, options, callback);
        };
        Ifconfig: GrpcUnaryServiceInterface<dependency_2.sliverpb.IfconfigReq, dependency_2.sliverpb.Ifconfig> = (message: dependency_2.sliverpb.IfconfigReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ifconfig>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ifconfig>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Ifconfig>): grpc_1.ClientUnaryCall => {
            return super.Ifconfig(message, metadata, options, callback);
        };
        Netstat: GrpcUnaryServiceInterface<dependency_2.sliverpb.NetstatReq, dependency_2.sliverpb.Netstat> = (message: dependency_2.sliverpb.NetstatReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Netstat>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Netstat>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Netstat>): grpc_1.ClientUnaryCall => {
            return super.Netstat(message, metadata, options, callback);
        };
        Ls: GrpcUnaryServiceInterface<dependency_2.sliverpb.LsReq, dependency_2.sliverpb.Ls> = (message: dependency_2.sliverpb.LsReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ls>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Ls>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Ls>): grpc_1.ClientUnaryCall => {
            return super.Ls(message, metadata, options, callback);
        };
        Cd: GrpcUnaryServiceInterface<dependency_2.sliverpb.CdReq, dependency_2.sliverpb.Pwd> = (message: dependency_2.sliverpb.CdReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Pwd>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Pwd>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Pwd>): grpc_1.ClientUnaryCall => {
            return super.Cd(message, metadata, options, callback);
        };
        Pwd: GrpcUnaryServiceInterface<dependency_2.sliverpb.PwdReq, dependency_2.sliverpb.Pwd> = (message: dependency_2.sliverpb.PwdReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Pwd>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Pwd>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Pwd>): grpc_1.ClientUnaryCall => {
            return super.Pwd(message, metadata, options, callback);
        };
        Rm: GrpcUnaryServiceInterface<dependency_2.sliverpb.RmReq, dependency_2.sliverpb.Rm> = (message: dependency_2.sliverpb.RmReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Rm>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Rm>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Rm>): grpc_1.ClientUnaryCall => {
            return super.Rm(message, metadata, options, callback);
        };
        Mkdir: GrpcUnaryServiceInterface<dependency_2.sliverpb.MkdirReq, dependency_2.sliverpb.Mkdir> = (message: dependency_2.sliverpb.MkdirReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Mkdir>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Mkdir>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Mkdir>): grpc_1.ClientUnaryCall => {
            return super.Mkdir(message, metadata, options, callback);
        };
        Download: GrpcUnaryServiceInterface<dependency_2.sliverpb.DownloadReq, dependency_2.sliverpb.Download> = (message: dependency_2.sliverpb.DownloadReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Download>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Download>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Download>): grpc_1.ClientUnaryCall => {
            return super.Download(message, metadata, options, callback);
        };
        Upload: GrpcUnaryServiceInterface<dependency_2.sliverpb.UploadReq, dependency_2.sliverpb.Upload> = (message: dependency_2.sliverpb.UploadReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Upload>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Upload>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Upload>): grpc_1.ClientUnaryCall => {
            return super.Upload(message, metadata, options, callback);
        };
        ProcessDump: GrpcUnaryServiceInterface<dependency_2.sliverpb.ProcessDumpReq, dependency_2.sliverpb.ProcessDump> = (message: dependency_2.sliverpb.ProcessDumpReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ProcessDump>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ProcessDump>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.ProcessDump>): grpc_1.ClientUnaryCall => {
            return super.ProcessDump(message, metadata, options, callback);
        };
        RunAs: GrpcUnaryServiceInterface<dependency_2.sliverpb.RunAsReq, dependency_2.sliverpb.RunAs> = (message: dependency_2.sliverpb.RunAsReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RunAs>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RunAs>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.RunAs>): grpc_1.ClientUnaryCall => {
            return super.RunAs(message, metadata, options, callback);
        };
        Impersonate: GrpcUnaryServiceInterface<dependency_2.sliverpb.ImpersonateReq, dependency_2.sliverpb.Impersonate> = (message: dependency_2.sliverpb.ImpersonateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Impersonate>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Impersonate>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Impersonate>): grpc_1.ClientUnaryCall => {
            return super.Impersonate(message, metadata, options, callback);
        };
        RevToSelf: GrpcUnaryServiceInterface<dependency_2.sliverpb.RevToSelfReq, dependency_2.sliverpb.RevToSelf> = (message: dependency_2.sliverpb.RevToSelfReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RevToSelf>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RevToSelf>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.RevToSelf>): grpc_1.ClientUnaryCall => {
            return super.RevToSelf(message, metadata, options, callback);
        };
        GetSystem: GrpcUnaryServiceInterface<dependency_3.clientpb.GetSystemReq, dependency_2.sliverpb.GetSystem> = (message: dependency_3.clientpb.GetSystemReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.GetSystem>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.GetSystem>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.GetSystem>): grpc_1.ClientUnaryCall => {
            return super.GetSystem(message, metadata, options, callback);
        };
        Task: GrpcUnaryServiceInterface<dependency_2.sliverpb.TaskReq, dependency_2.sliverpb.Task> = (message: dependency_2.sliverpb.TaskReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Task>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Task>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Task>): grpc_1.ClientUnaryCall => {
            return super.Task(message, metadata, options, callback);
        };
        Msf: GrpcUnaryServiceInterface<dependency_3.clientpb.MSFReq, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.MSFReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.Msf(message, metadata, options, callback);
        };
        MsfRemote: GrpcUnaryServiceInterface<dependency_3.clientpb.MSFRemoteReq, dependency_1.commonpb.Empty> = (message: dependency_3.clientpb.MSFRemoteReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.MsfRemote(message, metadata, options, callback);
        };
        ExecuteAssembly: GrpcUnaryServiceInterface<dependency_2.sliverpb.ExecuteAssemblyReq, dependency_2.sliverpb.ExecuteAssembly> = (message: dependency_2.sliverpb.ExecuteAssemblyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ExecuteAssembly>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ExecuteAssembly>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.ExecuteAssembly>): grpc_1.ClientUnaryCall => {
            return super.ExecuteAssembly(message, metadata, options, callback);
        };
        Migrate: GrpcUnaryServiceInterface<dependency_3.clientpb.MigrateReq, dependency_2.sliverpb.Migrate> = (message: dependency_3.clientpb.MigrateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Migrate>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Migrate>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Migrate>): grpc_1.ClientUnaryCall => {
            return super.Migrate(message, metadata, options, callback);
        };
        Execute: GrpcUnaryServiceInterface<dependency_2.sliverpb.ExecuteReq, dependency_2.sliverpb.Execute> = (message: dependency_2.sliverpb.ExecuteReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Execute>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Execute>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Execute>): grpc_1.ClientUnaryCall => {
            return super.Execute(message, metadata, options, callback);
        };
        ExecuteToken: GrpcUnaryServiceInterface<dependency_2.sliverpb.ExecuteTokenReq, dependency_2.sliverpb.Execute> = (message: dependency_2.sliverpb.ExecuteTokenReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Execute>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Execute>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Execute>): grpc_1.ClientUnaryCall => {
            return super.ExecuteToken(message, metadata, options, callback);
        };
        Sideload: GrpcUnaryServiceInterface<dependency_2.sliverpb.SideloadReq, dependency_2.sliverpb.Sideload> = (message: dependency_2.sliverpb.SideloadReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Sideload>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Sideload>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Sideload>): grpc_1.ClientUnaryCall => {
            return super.Sideload(message, metadata, options, callback);
        };
        SpawnDll: GrpcUnaryServiceInterface<dependency_2.sliverpb.InvokeSpawnDllReq, dependency_2.sliverpb.SpawnDll> = (message: dependency_2.sliverpb.InvokeSpawnDllReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SpawnDll>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SpawnDll>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.SpawnDll>): grpc_1.ClientUnaryCall => {
            return super.SpawnDll(message, metadata, options, callback);
        };
        Screenshot: GrpcUnaryServiceInterface<dependency_2.sliverpb.ScreenshotReq, dependency_2.sliverpb.Screenshot> = (message: dependency_2.sliverpb.ScreenshotReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Screenshot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Screenshot>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Screenshot>): grpc_1.ClientUnaryCall => {
            return super.Screenshot(message, metadata, options, callback);
        };
        NamedPipes: GrpcUnaryServiceInterface<dependency_2.sliverpb.NamedPipesReq, dependency_2.sliverpb.NamedPipes> = (message: dependency_2.sliverpb.NamedPipesReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.NamedPipes>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.NamedPipes>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.NamedPipes>): grpc_1.ClientUnaryCall => {
            return super.NamedPipes(message, metadata, options, callback);
        };
        TCPListener: GrpcUnaryServiceInterface<dependency_2.sliverpb.TCPPivotReq, dependency_2.sliverpb.TCPPivot> = (message: dependency_2.sliverpb.TCPPivotReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.TCPPivot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.TCPPivot>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.TCPPivot>): grpc_1.ClientUnaryCall => {
            return super.TCPListener(message, metadata, options, callback);
        };
        ListPivots: GrpcUnaryServiceInterface<dependency_2.sliverpb.PivotListReq, dependency_2.sliverpb.PivotList> = (message: dependency_2.sliverpb.PivotListReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.PivotList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.PivotList>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.PivotList>): grpc_1.ClientUnaryCall => {
            return super.ListPivots(message, metadata, options, callback);
        };
        StartService: GrpcUnaryServiceInterface<dependency_2.sliverpb.StartServiceReq, dependency_2.sliverpb.ServiceInfo> = (message: dependency_2.sliverpb.StartServiceReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>): grpc_1.ClientUnaryCall => {
            return super.StartService(message, metadata, options, callback);
        };
        StopService: GrpcUnaryServiceInterface<dependency_2.sliverpb.StopServiceReq, dependency_2.sliverpb.ServiceInfo> = (message: dependency_2.sliverpb.StopServiceReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>): grpc_1.ClientUnaryCall => {
            return super.StopService(message, metadata, options, callback);
        };
        RemoveService: GrpcUnaryServiceInterface<dependency_2.sliverpb.RemoveServiceReq, dependency_2.sliverpb.ServiceInfo> = (message: dependency_2.sliverpb.RemoveServiceReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.ServiceInfo>): grpc_1.ClientUnaryCall => {
            return super.RemoveService(message, metadata, options, callback);
        };
        MakeToken: GrpcUnaryServiceInterface<dependency_2.sliverpb.MakeTokenReq, dependency_2.sliverpb.MakeToken> = (message: dependency_2.sliverpb.MakeTokenReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.MakeToken>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.MakeToken>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.MakeToken>): grpc_1.ClientUnaryCall => {
            return super.MakeToken(message, metadata, options, callback);
        };
        GetEnv: GrpcUnaryServiceInterface<dependency_2.sliverpb.EnvReq, dependency_2.sliverpb.EnvInfo> = (message: dependency_2.sliverpb.EnvReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.EnvInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.EnvInfo>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.EnvInfo>): grpc_1.ClientUnaryCall => {
            return super.GetEnv(message, metadata, options, callback);
        };
        SetEnv: GrpcUnaryServiceInterface<dependency_2.sliverpb.SetEnvReq, dependency_2.sliverpb.SetEnv> = (message: dependency_2.sliverpb.SetEnvReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SetEnv>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SetEnv>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.SetEnv>): grpc_1.ClientUnaryCall => {
            return super.SetEnv(message, metadata, options, callback);
        };
        UnsetEnv: GrpcUnaryServiceInterface<dependency_2.sliverpb.UnsetEnvReq, dependency_2.sliverpb.UnsetEnv> = (message: dependency_2.sliverpb.UnsetEnvReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.UnsetEnv>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.UnsetEnv>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.UnsetEnv>): grpc_1.ClientUnaryCall => {
            return super.UnsetEnv(message, metadata, options, callback);
        };
        Backdoor: GrpcUnaryServiceInterface<dependency_2.sliverpb.BackdoorReq, dependency_2.sliverpb.Backdoor> = (message: dependency_2.sliverpb.BackdoorReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Backdoor>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Backdoor>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Backdoor>): grpc_1.ClientUnaryCall => {
            return super.Backdoor(message, metadata, options, callback);
        };
        RegistryRead: GrpcUnaryServiceInterface<dependency_2.sliverpb.RegistryReadReq, dependency_2.sliverpb.RegistryRead> = (message: dependency_2.sliverpb.RegistryReadReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryRead>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryRead>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.RegistryRead>): grpc_1.ClientUnaryCall => {
            return super.RegistryRead(message, metadata, options, callback);
        };
        RegistryWrite: GrpcUnaryServiceInterface<dependency_2.sliverpb.RegistryWriteReq, dependency_2.sliverpb.RegistryWrite> = (message: dependency_2.sliverpb.RegistryWriteReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryWrite>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryWrite>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.RegistryWrite>): grpc_1.ClientUnaryCall => {
            return super.RegistryWrite(message, metadata, options, callback);
        };
        RegistryCreateKey: GrpcUnaryServiceInterface<dependency_2.sliverpb.RegistryCreateKeyReq, dependency_2.sliverpb.RegistryCreateKey> = (message: dependency_2.sliverpb.RegistryCreateKeyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryCreateKey>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.RegistryCreateKey>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.RegistryCreateKey>): grpc_1.ClientUnaryCall => {
            return super.RegistryCreateKey(message, metadata, options, callback);
        };
        RunSSHCommand: GrpcUnaryServiceInterface<dependency_2.sliverpb.SSHCommandReq, dependency_2.sliverpb.SSHCommand> = (message: dependency_2.sliverpb.SSHCommandReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SSHCommand>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.SSHCommand>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.SSHCommand>): grpc_1.ClientUnaryCall => {
            return super.RunSSHCommand(message, metadata, options, callback);
        };
        WGStartPortForward: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGPortForwardStartReq, dependency_2.sliverpb.WGPortForward> = (message: dependency_2.sliverpb.WGPortForwardStartReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>): grpc_1.ClientUnaryCall => {
            return super.WGStartPortForward(message, metadata, options, callback);
        };
        WGStopPortForward: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGPortForwardStopReq, dependency_2.sliverpb.WGPortForward> = (message: dependency_2.sliverpb.WGPortForwardStopReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGPortForward>): grpc_1.ClientUnaryCall => {
            return super.WGStopPortForward(message, metadata, options, callback);
        };
        WGStartSocks: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGSocksStartReq, dependency_2.sliverpb.WGSocks> = (message: dependency_2.sliverpb.WGSocksStartReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>): grpc_1.ClientUnaryCall => {
            return super.WGStartSocks(message, metadata, options, callback);
        };
        WGStopSocks: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGSocksStopReq, dependency_2.sliverpb.WGSocks> = (message: dependency_2.sliverpb.WGSocksStopReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGSocks>): grpc_1.ClientUnaryCall => {
            return super.WGStopSocks(message, metadata, options, callback);
        };
        WGListForwarders: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGTCPForwardersReq, dependency_2.sliverpb.WGTCPForwarders> = (message: dependency_2.sliverpb.WGTCPForwardersReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGTCPForwarders>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGTCPForwarders>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGTCPForwarders>): grpc_1.ClientUnaryCall => {
            return super.WGListForwarders(message, metadata, options, callback);
        };
        WGListSocksServers: GrpcUnaryServiceInterface<dependency_2.sliverpb.WGSocksServersReq, dependency_2.sliverpb.WGSocksServers> = (message: dependency_2.sliverpb.WGSocksServersReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocksServers>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.WGSocksServers>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.WGSocksServers>): grpc_1.ClientUnaryCall => {
            return super.WGListSocksServers(message, metadata, options, callback);
        };
        Shell: GrpcUnaryServiceInterface<dependency_2.sliverpb.ShellReq, dependency_2.sliverpb.Shell> = (message: dependency_2.sliverpb.ShellReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Shell>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Shell>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Shell>): grpc_1.ClientUnaryCall => {
            return super.Shell(message, metadata, options, callback);
        };
        Portfwd: GrpcUnaryServiceInterface<dependency_2.sliverpb.PortfwdReq, dependency_2.sliverpb.Portfwd> = (message: dependency_2.sliverpb.PortfwdReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Portfwd>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Portfwd>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Portfwd>): grpc_1.ClientUnaryCall => {
            return super.Portfwd(message, metadata, options, callback);
        };
        CreateTunnel: GrpcUnaryServiceInterface<dependency_2.sliverpb.Tunnel, dependency_2.sliverpb.Tunnel> = (message: dependency_2.sliverpb.Tunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Tunnel>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.sliverpb.Tunnel>, callback?: grpc_1.requestCallback<dependency_2.sliverpb.Tunnel>): grpc_1.ClientUnaryCall => {
            return super.CreateTunnel(message, metadata, options, callback);
        };
        CloseTunnel: GrpcUnaryServiceInterface<dependency_2.sliverpb.Tunnel, dependency_1.commonpb.Empty> = (message: dependency_2.sliverpb.Tunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.commonpb.Empty>, callback?: grpc_1.requestCallback<dependency_1.commonpb.Empty>): grpc_1.ClientUnaryCall => {
            return super.CloseTunnel(message, metadata, options, callback);
        };
        TunnelData: GrpcChunkServiceInterface<dependency_2.sliverpb.TunnelData, dependency_2.sliverpb.TunnelData> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<dependency_2.sliverpb.TunnelData, dependency_2.sliverpb.TunnelData> => {
            return super.TunnelData(metadata, options);
        };
        Events: GrpcStreamServiceInterface<dependency_1.commonpb.Empty, dependency_1.commonpb.Empty> = (message: dependency_1.commonpb.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_1.commonpb.Empty> => {
            return super.Events(message, metadata, options);
        };
    }
}
